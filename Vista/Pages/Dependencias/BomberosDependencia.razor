@using Vista.Data.Models.Grupos.Dependencias
@using Vista.Data.ViewModels.Personal
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Data.Mappers

@*Servicios Utilizados*@
@using Vista.Services
@inject IDependenciaService DependenciaService
@inject IBomberoService BomberoService
@inject IMessageService MessageService

<style>
	.ant-table {
		width: 100%;
		background-color: white;
		border-radius: 8px;
		overflow: hidden;
	}

	.ant-table-title {
		background-color: #A63333
	}

	.ant-table-thead .ant-table-cell {
		background-color: #A63333 !important;
		color: white !important;
		font-weight: bold;
	}

	.ant-table-cell {
		padding: 16px !important;
	}

	.title-template-container {
		background-color: #A63333;
		padding: 16px;
		border-top-left-radius: 8px;
		border-top-right-radius: 8px;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.search-input {
		width: 250px;
	}

		.search-input input {
			background-color: rgba(255, 255, 255, 0.1);
			color: white;
			border: none;
		}

			.search-input input::placeholder {
				color: rgba(255, 255, 255, 0.7);
			}

	.add-button {
		background-color: #4CAF50 !important;
		border-color: #438E46 !important;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}

	.boton_p {
		background-color: #732D2D !important;
		color: white !important;
		border: none;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}

	@@media (max-width: 960px) {
		.title-template-container {
			flex-direction: column;
			align-items: stretch;
		}
	}

	.ant-form-horizontal .ant-form-item-label {
		flex-grow: 1;
		background: #A63333;
	}

		.ant-form-horizontal .ant-form-item-label > label {
			color: #FFFFFF;
			padding: 2px 4px;
		}

	.ant-form-item {
		box-sizing: border-box;
		margin: 0;
		margin-bottom: 0px;
		padding: 0;
		color: rgba(0, 0, 0, 0.85);
		font-size: 14px;
		line-height: 1.5715;
		list-style: none;
		font-feature-settings: 'tnum';
		margin-bottom: 8px !important;
		vertical-align: top;
		font-weight: bold;
	}

	.ant-modal-content {
		position: relative;
		background-color: #fff;
		background-clip: padding-box;
		border: 0;
		border-radius: 2px;
		box-shadow: 0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 9px 28px 8px rgba(0, 0, 0, 0.05);
		pointer-events: auto;
		border: 1px solid red !important;
	}
</style>


<Table TItem="BomberoDependenciaViewModel"
	   DataSource="@BomberosViewModel"
	   @bind-PageIndex="_pageIndex"
	   @bind-PageSize="_pageSize"
	   Title="Dependencias"
	   Responsive>
	<TitleTemplate>
		<Flex Justify="FlexJustify.FlexEnd">
			<Space>
				<Button Type="ButtonType.Primary" OnClick="() => showAddFirefightersModal()">
					<Icon Type="plus" /> Añadir
				</Button>
			</Space>
		</Flex>
	</TitleTemplate>

	<ColumnDefinitions>

		<PropertyColumn Title="N° Legajo" Property="d=>d.NroLeg" Sortable />

		<PropertyColumn Title="Apellido y Nombre" Property="d=>d.ApellidoYNombre" Sortable />

		<ActionColumn Title="Acciones" Align=ColumnAlign.Center>
			<Space>
				<SpaceItem>
					<Popconfirm Title="¿Deseas remover a este bombero de la dependencia?"
								OnConfirm="() => RemoveFirefighterFromDepartment(context.Id, DependenciaId)"
								OkText="Si"
								CancelText="No">
						<Button Danger>
							<Icon Type="close" />
						</Button>
					</Popconfirm>
				</SpaceItem>
			</Space>
		</ActionColumn>

	</ColumnDefinitions>
</Table>

<Modal @bind-Visible="_modalAñadirBomberosVisible" Title="Añadir Bomberos" OkText="@("Guardar")" CancelText="@("Cancelar")" OnOk="@AddFirefighterToDepartmentAsync">
	<Select Mode="SelectMode.Multiple"
			Placeholder="Elige los bomberos a agregar a la dependencia"
			DataSource="@BomberosTodosViewModel"
			Values="@BomberosSeleccionados"
			TItem="BomberoViweModel"
			TItemValue="int"
			LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
			ValueName="@nameof(BomberoViweModel.Id)"
			EnableSearch="true"
			ValuesChanged="@(async (values) => await HandleValuesChange(values))" />
	<p>Seleccionados: @String.Join(", ", BomberosSeleccionados)</p>
</Modal>

@code {
	[Parameter] public int DependenciaId { get; set; } // ID de la Dependencia que se está editando
	private List<Bombero?> DependenciaBomberos = new(); // Lista de Bomberos de la Dependencia
	public List<BomberoDependenciaViewModel?> BomberosViewModel { get; set; } = new(); // Lista de Bomberos en formato ViewModel para la Dependencia
	private List<int> BomberosSeleccionados = new List<int>(); // Lista de IDs de Bomberos seleccionados para agregar a la Dependencia
	public List<BomberoViweModel?> BomberosTodosViewModel { get; set; } = new(); // Lista de Bomberos en formato ViewModel para todos los Bomberos disponibles
	public List<Bombero?> BomberosTodos { get; set; } = new(); // Lista de todos los Bomberos disponibles

	// Variables de Tamaño de la Tabla
	int _pageIndex = 1;
	int _pageSize = 5;

	// Modals
	private bool _modalAñadirBomberosVisible = false;

	public class BomberoDependenciaViewModel
	{
		public int Id { get; set; }
		public int NroLeg { get; set; }
		public string ApellidoYNombre { get; set; } = null!;
	}

	protected override async Task OnInitializedAsync()
	{
		await OnInit();
	}

	public async Task OnInit()
	{
		if (DependenciaId <= 0)
		{
			await MessageService.ErrorAsync("ID de Dependencia inválido.");
			return;
		}

		if (DependenciaService == null)
		{
			await MessageService.ErrorAsync("Servicio de Dependencia no está disponible.");
			return;
		}

		if (BomberoService == null)
		{
			await MessageService.ErrorAsync("Servicio de Bombero no está disponible.");
			return;
		}


		// Si todo está bien, obtenemos todos los bomberos de la base de datos
		BomberosTodos = await BomberoService.ObtenerTodosLosBomberosAsync();

		// Si no hay bomberos, mostramos un mensaje de error

		if (BomberosTodos == null || !BomberosTodos.Any())
		{
			await MessageService.ErrorAsync("No hay bomberos disponibles en la base de datos.");
			return;
		}

		// Los mapeamos a ViewModel
		BomberosTodosViewModel = BomberosTodos.ToBomberoViewModelList();

		// Si no hay bomberos disponibles en la lista, mostramos un mensaje de error indicando que fue un error de mapeo
		if (BomberosTodosViewModel == null || !BomberosTodosViewModel.Any())
		{
			await MessageService.ErrorAsync("Error al mapear los bomberos a la lista de ViewModel.");
			return;
		}

		// Obtenemos los bomberos de la dependencia específica
		DependenciaBomberos = await DependenciaService.ObtenerBomberosDeDependenciaAsync(DependenciaId);

		// Mapeamos los bomberos de la dependencia a ViewModel
		BomberosViewModel = MapFirefightersToDepartmentViewModels(DependenciaBomberos);

		// Si no se pudieron mapear los bomberos a ViewModel, mostramos un mensaje de error
		if (BomberosViewModel == null || !BomberosViewModel.Any() || DependenciaBomberos != null || DependenciaBomberos.Any())
	{
            await MessageService.ErrorAsync("Error al mapear los bomberos de la dependencia a ViewModel");
            return;
		}

        // Limpiamos la lista de bomberos seleccionados
		BomberosSeleccionados = new();

        // Si todo salió bien, actualizamos el estado del componente
		StateHasChanged();
	}

	public List<BomberoDependenciaViewModel?> MapFirefightersToDepartmentViewModels(List<Bombero?> bomberos)
	{
		if (bomberos.Any())
		{
			return DependenciaBomberos.Select(b => new BomberoDependenciaViewModel
				{
					Id = b.PersonaId,
					NroLeg = b.NumeroLegajo,
					ApellidoYNombre = $"{b.Apellido}, {b.Nombre}"
				}).ToList();
		}
		return null;
	}

	public async Task RemoveFirefighterFromDepartment(int BomberoID, int DependenciaID)
	{
		if (BomberoID == 0 || DependenciaID == 0)
		{
			await MessageService.ErrorAsync("No se puede eliminar el bombero de la dependencia");
			return;
		}

		bool isBomberoInDependencia = DependenciaService.ComprobarBomberoEnDependenciaAsync(BomberoID, DependenciaID).Result;

		if (!isBomberoInDependencia)
		{
			await MessageService.ErrorAsync("El bombero no pertenece a la dependencia");
			return;
		}

		await DependenciaService.QuitarBomberoDeDependenciaAsync(DependenciaID, BomberoID);
		await OnInit();
	}

	public async Task AddFirefighterToDepartmentAsync()
	{
		if (BomberosSeleccionados.Any())
		{
			foreach (int BomberoSelId in BomberosSeleccionados)
			{
				if (BomberoSelId > 0)
				{
					await DependenciaService.AgregarBomberoADependenciaAsync(DependenciaId, BomberoSelId);
				}
			}

			await MessageService.SuccessAsync($"Se añadieron {BomberosSeleccionados.Count} Bomberos a la Dependencia");
			_modalAñadirBomberosVisible = false;
			await OnInit();
		}
		else
		{
			_modalAñadirBomberosVisible = false;
		}
	}

	public async Task showAddFirefightersModal()
	{
		if (BomberosTodos == null || !BomberosTodos.Any())
		{
			await MessageService.ErrorAsync("No hay bomberos disponibles para agregar.");
			return;
		}

		_modalAñadirBomberosVisible = true;
	}

	private async Task HandleValuesChange(IEnumerable<int> values)
	{
		BomberosSeleccionados = values.ToList();
	}
}