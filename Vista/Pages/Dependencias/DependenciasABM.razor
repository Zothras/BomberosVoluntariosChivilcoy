@page "/Dependencias"
@using Vista.Data.Models.Grupos.Dependencias
@using Vista.Data.ViewModels.Personal
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Data.Mappers

@*Servicios Utilizados*@
@using Vista.Services
@inject IDependenciaService DependenciaService
@inject IBomberoService BomberoService
@inject IMessageService MessageService

<style>
    .template {
        width: 100%;
        height: 100%;
        max-width: 97%;
        min-width: 400px;
        max-height: 100vh;
        border-radius: 10px;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        background: #fff;
        display: flex;
        flex-direction: column;
        margin: 1em;
        padding: 10px;
        overflow: auto;
    }

    .ant-table {
        width: 100%;
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
    }

    .ant-table-title {
        background-color: #A63333
    }

    .ant-table-thead .ant-table-cell {
        background-color: #A63333 !important;
        color: white !important;
        font-weight: bold;
    }

    .ant-table-cell {
        padding: 16px !important;
    }

    .title-template-container {
        background-color: #A63333;
        padding: 16px;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-input {
        width: 250px;
    }

        .search-input input {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
            border: none;
        }

            .search-input input::placeholder {
                color: rgba(255, 255, 255, 0.7);
            }

    .add-button {
        background-color: #4CAF50 !important;
        border-color: #438E46 !important;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .boton_p {
        background-color: #732D2D !important;
        color: white !important;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    @@media (max-width: 960px) {
        .title-template-container {
            flex-direction: column;
            align-items: stretch;
        }
    }

    .ant-form-horizontal .ant-form-item-label {
        flex-grow: 1;
        background: #A63333;
    }

        .ant-form-horizontal .ant-form-item-label > label {
            color: #FFFFFF;
            padding: 2px 4px;
        }

    .ant-form-item {
        box-sizing: border-box;
        margin: 0;
        margin-bottom: 0px;
        padding: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 14px;
        line-height: 1.5715;
        list-style: none;
        font-feature-settings: 'tnum';
        margin-bottom: 8px !important;
        vertical-align: top;
        font-weight: bold;
    }

    .ant-modal-content {
        position: relative;
        background-color: #fff;
        background-clip: padding-box;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 9px 28px 8px rgba(0, 0, 0, 0.05);
        pointer-events: auto;
        border: 1px solid red !important;
    }
</style>

<div class="template">
    <Table TItem="DependenciaViewModelTable"
           DataSource="@DependenciaViewModels"
           @bind-PageIndex="_pageIndex"
           @bind-PageSize="_pageSize"
           Title="Dependencias"
           Responsive>
        <TitleTemplate>
            <GridRow>
                <GridCol Span="12">
                    <Title Level="3" Style="color: white;">Dependencias</Title>
                </GridCol>
                <GridCol Span="12" Style="text-align: right;">
                    <Button Type="ButtonType.Primary" OnClick="() => VerAñadirDependencia()">
                        <Icon Type="plus" /> Nueva
                    </Button>
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Title="Nombre" Property="d => d.Nombre" Sortable />

            <PropertyColumn Title="Encargado" Property="d => d.EncargadoApellidoYNombre" Sortable />

            <ActionColumn Title="Acciones" Align=ColumnAlign.Center>
                <Space>
                    <SpaceItem>
                        <Button OnClick="() => VerDetalleDependencia(context.Id)">
                            <Icon Type="team" />
                        </Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Popconfirm Title="¿Eliminar esta dependencia?"
                                    OnConfirm="() => BorrarDependencia(context.Id)"
                                    OkText="Si"
                                    CancelText="No">
                            <Button Danger>
                                <Icon Type="delete" />
                            </Button>
                        </Popconfirm>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Type="@ButtonType.Primary" OnClick="()=>
                                                                                       VerEditarDependencia(context.Id)" Ghost>
                            <Icon Type="edit" />
                        </Button>
                    </SpaceItem>
                </Space>
            </ActionColumn>

        </ColumnDefinitions>
    </Table>
</div>

@*Modal para Añadir Dependencias*@
<Modal @bind-Visible="_modalAñadirVisible" Title="Añadir Dependencia" OkText="@("Guardar")" CancelText="@("Cancelar")" OnOk="@AddDependencia">
    <Form Model="newDependencia">
        <FormItem Label="Nombre">
            <Input @bind-Value="newDependencia.Nombre" />
        </FormItem>
        <FormItem Label="Encargado">
            <Select TItem="BomberoViweModel"
                    TItemValue="BomberoViweModel"
                    DataSource="@bomberosTodosViewModel"
                    @bind-Value="newDependencia.Encargado"
                    LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                    Placeholder="Seleccione un bombero"
                    DefaultActiveFirstOption="false"
                    AllowClear="true" EnableSearch>
            </Select>
        </FormItem>
    </Form>
</Modal>

@*Modal para Editar Dependencias*@
<Modal @bind-Visible="_modalEditarVisible" Title="Editar Dependencia" OkText="@("Editar")" CancelText="@("Cancelar")" OnOk="@EditDependencia">
    <Form Model="selDependencia">
        <FormItem Label="Nombre">
            <Input @bind-Value="selDependencia.Nombre" />
        </FormItem>
        <FormItem Label="Encargado">
            <Select TItem="BomberoViweModel"
                    TItemValue="BomberoViweModel"
                    DataSource="@bomberosTodosViewModel"
                    @bind-Value="selDependencia.Encargado"
                    LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                    Placeholder="Seleccione un bombero"
                    DefaultActiveFirstOption="false"
                    AllowClear="true" EnableSearch>
            </Select>
        </FormItem>
    </Form>
</Modal>

<Modal @bind-Visible="_modalDetallesVisible" Title="@TitleDependenciaSel" Maximizable="@true" Centered="@true">
    <BomberosDependencia DependenciaId="@IdDependenciaSel"></BomberosDependencia>
</Modal>

@code {
    // Lista con todos los bomberos
    private List<Bombero> bomberosTodos = new();

    // Lista con todos los bomberos en formato ViewModel
    private List<BomberoViweModel> bomberosTodosViewModel = new();

    // Variables
    private DependenciaViewModelTable newDependencia = new();
    private DependenciaViewModelTable selDependencia = new();
    private string? TitleDependenciaSel;
    private int IdDependenciaSel;

    // Modals
    private bool _modalAñadirVisible = false;
    private bool _modalDetallesVisible = false;
    private bool _modalEditarVisible = false;

    // Lista de Dependencias
    private List<Dependencia> Dependencias = new List<Dependencia>();

    // Variables de Tamaño de la Tabla
    int _pageIndex = 1;
    int _pageSize = 5;

    // Lista de ViewModels de Dependencia
    private List<DependenciaViewModelTable> DependenciaViewModels = new List<DependenciaViewModelTable>();

    public class DependenciaViewModelTable
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = null!;
        public string? EncargadoApellidoYNombre { get; set; }
        public BomberoViweModel Encargado { get; set; } = null!;
    }

    protected override async Task OnInitializedAsync()
    {
        // Validamos si el servicio de Bombero está disponible.
        if (BomberoService == null)
        {
            await MessageService.ErrorAsync("El servicio de Bombero no está disponible. Por favor, intente nuevamente más tarde.");
            return;
        }

        bomberosTodos = await BomberoService.ObtenerTodosLosBomberosAsync(); // Obtiene todos los Bomberos.

        // Verifica si la lista de bomberos está vacía.
        if (bomberosTodos == null || bomberosTodos.Count == 0)
        {
            await MessageService.ErrorAsync("No se encontraron bomberos disponibles.");
            return;
        }

        bomberosTodosViewModel = bomberosTodos.ToBomberoViewModelList(); // Convierte la lista de Bomberos a ViewModel.

        // Verifica si la lista de Bomberos a ViewModel.
        if (bomberosTodosViewModel == null || bomberosTodosViewModel.Count == 0)
        {
            bomberosTodosViewModel = new List<BomberoViweModel>();
        }

        // Obtiene todas las dependencias.
        Dependencias = await DependenciaService.ObtenerTodasLasDependenciasAsync();

        // Verifica si la lista de dependencias está vacía. (Si no hay dependencias, muestra un mensaje de advertencia).
        if (Dependencias == null || Dependencias.Count == 0)
        {
            await MessageService.WarningAsync("No se encontraron dependencias disponibles en la base de datos.");
        }

        // Mapea las dependencias a ViewModel.
        DependenciaViewModels = await MapearDependenciasAsync(Dependencias);

        // Verifica si la lista de dependencias mapeadas está vacía. Pero tambien verifica si la lista de dependencias es nula o tiene elementos. Para determinar que es un error de mapeo.
        if (DependenciaViewModels == null || DependenciaViewModels.Count == 0 || Dependencias != null || Dependencias.Count != 0)
        {
            await MessageService.ErrorAsync("Error al mapear las dependencias. Por favor, intente nuevamente más tarde.");
            return;
        }

        // Si todo está bien, actualiza el estado del componente.
        StateHasChanged();
    }

    public async Task<List<DependenciaViewModelTable>> MapearDependenciasAsync(List<Dependencia> dependencias)
    {
        return await Task.Run(() => dependencias.Select(d => new DependenciaViewModelTable
        {
            Id = d.DependenciaId,
            Nombre = d.NombreDependencia,
            EncargadoApellidoYNombre = $"{d.Encargado.Apellido}, {d.Encargado.Nombre}"
        }).ToList());
    }

    private async Task AddDependencia()
    {
        if (newDependencia.Encargado == null)
        {
            await MessageService.ErrorAsync("No se ha seleccionado un encargado. Por favor, elija un encargado antes de continuar.");
            return;
        }

        if (string.IsNullOrWhiteSpace(newDependencia.Nombre))
        {
            await MessageService.ErrorAsync("El nombre de la dependencia no puede estar vacío.");
            return;
        }

        Bombero BomberoEncargado = await BomberoService.ObtenerBomberoObjetoPorLegajoAsync(newDependencia.Encargado.NumeroLegajo);

        if (BomberoEncargado == null)
        {
            await MessageService.ErrorAsync("El encargado seleccionado no es válido.");
            return;
        }

        var dependencia = new Dependencia
        {
            NombreDependencia = newDependencia.Nombre,
            Encargado = BomberoEncargado
        };

        await DependenciaService.AgregarDependenciaAsync(dependencia);
        newDependencia = new DependenciaViewModelTable();
        _modalAñadirVisible = false;
        await OnInitializedAsync();
        await MessageService.SuccessAsync("Dependencia añadida correctamente.");
    }

    private async Task EditDependencia()
    {
        if (selDependencia.Encargado == null)
        {
            await MessageService.ErrorAsync("No se ha seleccionado un encargado. Por favor, elija un encargado antes de continuar.");
            return;
        }

        if (string.IsNullOrWhiteSpace(selDependencia.Nombre))
        {
            await MessageService.ErrorAsync("El nombre de la dependencia no puede estar vacío.");
            return;
        }

        if (selDependencia.Id <= 0)
        {
            await MessageService.ErrorAsync("ID inválido. Por favor, proporcione un ID válido.");
            return;
        }

        var BomberoEncargado = await BomberoService.ObtenerBomberoObjetoPorLegajoAsync(selDependencia.Encargado.NumeroLegajo);

        if (BomberoEncargado == null)
        {
            await MessageService.ErrorAsync("El encargado seleccionado no es válido.");
            return;
        }

        var dependencia = new Dependencia
        {
            DependenciaId = selDependencia.Id,
            NombreDependencia = selDependencia.Nombre,
            Encargado = BomberoEncargado
        };

        await DependenciaService.EditarDependenciaAsync(dependencia);
        _modalEditarVisible = false;
        await OnInitializedAsync();
        await MessageService.SuccessAsync("Dependencia editada correctamente.");
    }

    private async Task VerAñadirDependencia()
    {
        if (bomberosTodos.Count == 0)
        {
            await MessageService.ErrorAsync("No hay bomberos disponibles para asignar como encargado.");
            return;
        }

        newDependencia = new DependenciaViewModelTable();
        _modalAñadirVisible = true;
    }

    private async Task VerEditarDependencia(int id)
    {
        if (id <= 0)
        {
            await MessageService.ErrorAsync("ID inválido. Por favor, proporcione un ID válido.");
            return;
        }

        var Dependencia = await DependenciaService.ObtenerDependenciaPorIdAsync(id);

        if (Dependencia == null)
        {
            await MessageService.ErrorAsync("Error al intentar editar la dependencia: No se encontró.");
            return;
        }

        var encargado = bomberosTodosViewModel.FirstOrDefault(b => b.NumeroLegajo == Dependencia.Encargado.NumeroLegajo);

        if (encargado == null)
        {
            await MessageService.ErrorAsync("Error al intentar editar la dependencia: No se encontró un encargado válido.");
            return;
        }

        selDependencia = new DependenciaViewModelTable
        {
            Id = Dependencia.DependenciaId,
            Nombre = Dependencia.NombreDependencia,
            Encargado = encargado
        };

        _modalEditarVisible = true;
    }

    private async Task VerDetalleDependencia(int id)
    {
        var Dependencia = await DependenciaService.ObtenerDependenciaPorIdAsync(id);
        if (Dependencia != null!)
        {
            TitleDependenciaSel = Dependencia.NombreDependencia;
            IdDependenciaSel = Dependencia.DependenciaId;
            _modalDetallesVisible = true;
        }
        else
            await MessageService.ErrorAsync("Error al abrir la dependencia: No se encontró.");
    }

    private async Task BorrarDependencia(int id)
    {
        await DependenciaService.EliminarDependenciaAsync(id);
        await OnInitializedAsync();
        await MessageService.SuccessAsync("Dependencia eliminada correctamente.");
    }
}