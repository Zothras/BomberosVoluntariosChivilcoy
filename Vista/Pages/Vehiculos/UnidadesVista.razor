@using Vista.Components.Vehiculos
@using Vista.Data.Models.Vehiculos.Flota
@using AntDesign
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@page "/unidades"

<div class="container">
    <Content Style="padding: 16px;">
        <Card Bordered="false"
              Style="width: 100%; border-radius: 16px; box-shadow: 0px 8px 24px rgba(0, 0, 0, 0.1); background: #ffffff;">
            <div class="header-container" style="=display: flex; justify-content: space-between; align-items: center; padding: 16px;">
                <div>
                    <h2 style="margin-bottom: 0;">🚒 UNIDADES</h2>
                    <p style="margin-top: 4px; color: #666;">@vehiculos?.Count(v => v.Estado == TipoEstadoMovil.Activo) unidades activas</p>
                </div>
                <Space>
                    <Button Type="default"
                            OnClick="@(() => navigationManager.NavigateTo("/unidades/unidades-baja"))"
                            Style="background: #d32f2f; color: white; border-radius: 8px; font-weight: 600;">
                        🗑️ Unidades de Baja
                    </Button>
                    <Button Type="ButtonType.Primary"
                            OnClick="@(() => AgregarVisible = true)"
                            Style="border-radius: 8px; font-weight: 600;">
                        <Icon Type="plus" /> Nueva Unidad
                    </Button>
                </Space>
            </div>
            <Divider Style="margin: 0; border-color: #e0e0e0;" />

            <div style="="margin-top: 24px"></div>
            @if (vehiculos is not null)
            {
                <div class="vehicles-grid">
                    @foreach (VehiculoSalida m in vehiculos.Where(v => v.Estado == TipoEstadoMovil.Activo))
                    {
                        <VehiculosCarta Vehiculo="m" OnChange="Init" />
                    }
                </div>
            }
            else
            {
                <div class="loading-container">
                    <Spin Size="SpinSize.Large" Indicator="@LoadingIcon" />
                </div>
            }
        </Card>
    </Content>

    <Modal Title="Agregar"
           Visible="@AgregarVisible"
           OnCancel="@(() => AgregarVisible = false)"
           Footer="null"
           Style="border-radius: 12px; padding: 16px;">
        <VehiculoAgregar OnClose="CloseVehiculo" />
    </Modal>
</div>

@code {
    RenderFragment LoadingIcon => @<Icon Type="loading" Theme="IconThemeType.Outline" Style="font-size: 24px; color: rgb(62, 24, 24);" Spin />;
    List<VehiculoSalida> vehiculos = new();
    bool AgregarVisible { get; set; }
    BomberosDbContext Context { get; set; }

    private async void CloseVehiculo()
    {
        AgregarVisible = false;
        await Init();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        using (Context = DbFactory.CreateDbContext())
        {
            vehiculos = await Context.Set<VehiculoSalida>()
                .OrderBy(m => m.NumeroMovil)
                .ToListAsync();
        }
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}