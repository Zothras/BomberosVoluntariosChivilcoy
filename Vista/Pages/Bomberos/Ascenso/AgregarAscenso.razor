@implements IDisposable
@using System.ComponentModel.DataAnnotations
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@using Vista.Services
@inject IBomberoService BomberoService
@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
<style>



    .boton_p {
        background-color: #1890ff !important;
        border-color: currentColor !important;
        margin-right: 60px;
        margin-bottom: 17px !important;
        color: white;
    }

    .ant-btn:hover, .ant-btn:focus, .ant-btn:active {
        text-decoration: none;
        background: #40a9ff !important;
    }

    .ant-btn:hover, .ant-btn:focus {
        color: white !important;
        border-color: #40a9ff !important;
        background: #40a9ff !important;
    }

    .ant-form-horizontal .ant-form-item-label {
        flex-grow: 0;
        font-weight: bold;
    }

    .ant-modal-header {
        padding: 0px !important;
        color: rgba(0, 0, 0, 0.85);
        background: #fff;
        border-bottom: 1px solid #f0f0f0;
        border-radius: 2px 2px 0 0;
    }

    .ant-modal-body {
        padding: 24px;
        font-size: 14px;
        line-height: 1.5715;
        word-wrap: break-word;
        margin-top: 20px !important;
    }
</style>

<Form Model="AscensoVM"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      Style="width: 100%;height: 100%;">

    <!-- Habilita la validación basada en DataAnnotations -->
    <DataAnnotationsValidator />

    <!-- Muestra un resumen de errores de validación -->
    <ValidationSummary />

    <FormItem Label="Personal Afectado">
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@BomberoTodos"
                @bind-Value="@Bombero"
                LabelName="@nameof(BomberoViweModel.NombreYApellido)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione Bombero Encargado"
                DefaultActiveFirstOption="false"
                OnSelectedItemChanged="HandleChange"
                EnableSearch>
        </Select>
    </FormItem>

    <FormItem Label="Fecha de Ascenso">
        <DatePicker TValue="DateTime" DefaultValue="DateTime.Now" @bind-Value="@AscensoVM.FechaAscenso" />
    </FormItem>

    <FormItem Label="Descripción">
        <Input @bind-Value="AscensoVM.Descripcion" />
    </FormItem>

    <FormItem Label="Grado anterior">
        <Input Value="@AscensoVM.GradoAntiguo" Disabled />
    </FormItem>

    <FormItem Label="Grado ascenso">
        <EnumSelect TEnum="@EscalafonJerarquico" @bind-Value="AscensoVM.GradoAscenso" />
    </FormItem>

    <FormItem Label="Número de libro" Class="required-label">
        <Input @bind-Value="AscensoVM.NumeroLibro" />
        <ValidationMessage For="() => AscensoVM.NumeroLibro" />
    </FormItem>

    <FormItem Label="Número de acta" Class="required-label">
        <Input @bind-Value="AscensoVM.NumeroActa" />
        <ValidationMessage For="() => AscensoVM.NumeroActa" />
    </FormItem>

    <FormItem Style="width: 100% !important;
            display: flex !important;
            justify-content: flex-end !important;
            align-items: flex-end !important; height:100% !important; margin-bottom: -32px;" WrapperColOffset="8" WrapperColSpan="16">
        <Button Class="boton_p" HtmlType="submit" Style="margin-right: 60px;">
            Ascender Bombero
        </Button>
    </FormItem>
</Form>




@code {
    [Parameter] public EventCallback OnClose { get; set; }
    List<BomberoViweModel> BomberoTodos = new List<BomberoViweModel>();
    public Bombero[]? bomberos;
    public int Bombero { get; set; }
    BomberosDbContext Context { get; set; }
    AscensoViewModel AscensoVM { get; set; } = new AscensoViewModel();

    private async void HandleChange()
    {
        Bombero bombero = Context.Bomberos.Where(b => b.NumeroLegajo == Bombero).SingleOrDefault();
        if (bombero != null)
        {
            AscensoVM.GradoAntiguo = bombero.Grado;
        }
    }

    // View Model

    public class AscensoViewModel
    {
        public Bombero PersonalAfectado { get; set; }

        [Required(ErrorMessage = "La fecha de ascenso es obligatoria.")]
        public DateTime FechaAscenso { get; set; }

        public string Descripcion { get; set; }

        public EscalafonJerarquico GradoAntiguo { get; set; }

        public EscalafonJerarquico GradoAscenso { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "El número de libro debe ser mayor que 0.")]
        public int NumeroLibro { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "El número de acta debe ser mayor que 0.")]
        public int NumeroActa { get; set; }
    }


    // OnFinish

    private async void OnFinish(EditContext editContext)
    {
        try
        {
            Bombero? BomberoAfectado = await Context.Bomberos.Where(b => b.NumeroLegajo == Bombero).SingleOrDefaultAsync();
            AscensoBombero ascenso = new()
                {
                    FechaAscenso = DateOnly.FromDateTime(AscensoVM.FechaAscenso),
                    Descripcion = AscensoVM.Descripcion,
                    GradoAntiguo = AscensoVM.GradoAntiguo,
                    GradoAscenso = AscensoVM.GradoAscenso,
                    PersonalAfectado = BomberoAfectado,
                    NumeroActa = AscensoVM.NumeroActa,
                    NumeroLibero = AscensoVM.NumeroLibro
                };
            await BomberoService.AscenderBombero(ascenso);
            await Init();
            await OnClose.InvokeAsync();
            StateHasChanged();
            await message.SuccessAsync("Bombero Ascendido");
        }
        catch (Exception e)
        {
            await Init();
            StateHasChanged();
            if (e.InnerException != null)
                await message.ErrorAsync(e.InnerException.Message, 5);
            else
                await message.ErrorAsync(e.Message, 5);

        }
    }
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(AscensoVM)}");
    }

    // Init y Carga de datos

    public async Task CargarBomberosView()
    {
        BomberoTodos = new();
        var bomberos = await Context.Bomberos.ToListAsync();
        foreach (Bombero b in bomberos)
        {
            BomberoViweModel bombero = new()
                {
                    Nombre = b.Nombre,
                    Apellido = b.Apellido,
                    NumeroLegajo = b.NumeroLegajo
                };
            BomberoTodos.Add(bombero);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        AscensoVM = new();

        Context = DbFactory.CreateDbContext();

        await CargarBomberosView();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}