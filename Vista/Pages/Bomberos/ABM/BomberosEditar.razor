@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory
@inject IMessageService message
@using Vista.Services;
@inject IBomberoService BomberoService;
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;
@using Vista.Data.Models.Grupos.Brigadas
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes

<style>
    /* Contenedor del contenido del modal */
    .ant-modal-content {
        position: relative;
        background-color: #fff;
        background-clip: padding-box;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 9px 28px 8px rgba(0, 0, 0, 0.05);
        pointer-events: auto;
        border: 1px solid red !important; /* ¡Este estilo modifica el borde del modal! */
    }

    /* Etiquetas del formulario dentro del modal */
    .ant-form-horizontal .ant-form-item-label {
        flex-grow: 1;
        background: #A63333;
    }

        .ant-form-horizontal .ant-form-item-label > label {
            color: #FFFFFF;
            padding: 2px 4px;
        }

    /* Ítems del formulario */
    .ant-form-item {
        box-sizing: border-box;
        margin: 0;
        margin-bottom: 8px !important;
        padding: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 14px;
        line-height: 1.5715;
        font-weight: bold;
        vertical-align: top;
    }
</style>

@* Editar bombero *@
<Form Loading="loading" Model="@bomberoVM"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinishFailed="OnFinishFailed">
    <FormItem Label="Foto" class="custom-label">
        <InputFile OnChange="SubirFoto" />
    </FormItem>
    <FormItem Label="Nombre">
        <Input DefaultValue="@bomberoVM.Nombre" @bind-Value="@bomberoVM.Nombre" />
    </FormItem>
    <FormItem Label="Apellido">
        <Input DefaultValue="@bomberoVM.Apellido" @bind-Value="@bomberoVM.Apellido" />
    </FormItem>

    <FormItem Label="Fecha de Nacimiento">
        <DatePicker @bind-Value="@bomberoVM.FechaNacimiento" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
    </FormItem>

    <FormItem Label="DNI">
        <Input DefaultValue="@bomberoVM.Documento" @bind-Value="@bomberoVM.Documento" />
    </FormItem>
    <FormItem Label="Dirección">
        <Input DefaultValue="@bomberoVM.Direccion" @bind-Value="@bomberoVM.Direccion" />
    </FormItem>
    <FormItem Label="Dotaciónes">
        <EnumSelect DefaultValue="@bomberoVM.Dotacion" TEnum="TipoDotaciones" @bind-Value="@bomberoVM.Dotacion" />
    </FormItem>

    <FormItem Label="Número Legajo">
        <AntDesign.InputNumber DefaultValue="@bomberoVM.NumeroLegajo" @bind-Value="@bomberoVM.NumeroLegajo" />
    </FormItem>

    <FormItem Label="Fecha de Aceptación">
        <DatePicker DefaultValue="@bomberoVM.FechaAceptacion" @bind-Value="@bomberoVM.FechaAceptacion" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
    </FormItem>

    <FormItem Label="Número IOMA">
        <Input DefaultValue="@bomberoVM.NumeroIoma" @bind-Value="@bomberoVM.NumeroIoma" />
    </FormItem>

    <FormItem Label="Lugar de nacimiento">
        <Input DefaultValue="@bomberoVM.LugarNacimiento" @bind-Value="@bomberoVM.LugarNacimiento" />
    </FormItem>

    <FormItem Label="Grupo Sanguíneo">
        <EnumSelect DefaultValue="@bomberoVM.GrupoSanguineo" TEnum="TipoGrupoSanguineo" @bind-Value="@bomberoVM.GrupoSanguineo" />
    </FormItem>

    <FormItem Label="Altura (cm)">
        <AntDesign.InputNumber DefaultValue="@bomberoVM.Altura" @bind-Value="@bomberoVM.Altura" />
    </FormItem>

    <FormItem Label="Peso">
        <AntDesign.InputNumber DefaultValue="@bomberoVM.Peso" @bind-Value="@bomberoVM.Peso" />
    </FormItem>

    <FormItem Label="Observaciónes">
        <Input DefaultValue="@bomberoVM.Observaciones" @bind-Value="@bomberoVM.Observaciones" />
    </FormItem>

    <FormItem Label="Nivel de estudio">
        <Input DefaultValue="@bomberoVM.NivelEstudios" @bind-Value="@bomberoVM.NivelEstudios" />
    </FormItem>

    <FormItem Label="Profesión">
        <Input DefaultValue="@bomberoVM.Profesion" @bind-Value="@bomberoVM.Profesion" />
    </FormItem>

    <FormItem Label="Es chofer">
        <Switch @bind-Checked="@bomberoVM.Chofer" />
        @if (bomberoVM.Chofer)
        {
            <label id="texto"> Vencimiento del carnet</label>
            <br>
            <DatePicker DefaultValue="@bomberoVM.VencimientoRegistro" @bind-Value="@bomberoVM.VencimientoRegistro" Picker="@DatePickerType.Date" Style="width: 100%;" AllowClear />
        }
        @if (!bomberoVM.Chofer)
        {
            <label id="texto"></label>
        }
    </FormItem>

    <FormItem Label="Grado">
        <EnumSelect DefaultValue="@bomberoVM.Grado" TEnum="EscalafonJerarquico" @bind-Value="@bomberoVM.Grado" />
    </FormItem>
    <FormItem Label="Estado">
        <Select @bind-Value="@bomberoVM.Estado"
                DefaultValue="@(bomberoVM.Estado)"
                Style="width:200px"
                TItemValue="EstadoBombero"
                TItem="EstadoBombero"
                Bordered="true">
            <SelectOptions>
                <SelectOption TItemValue="EstadoBombero" TItem="EstadoBombero" Value="@(EstadoBombero.CuerpoActivo)" Label="Cuerpo activo" />
                <SelectOption TItemValue="EstadoBombero" TItem="EstadoBombero" Value="@(EstadoBombero.Reserva)" Label="Reserva" />
                <SelectOption TItemValue="EstadoBombero" TItem="EstadoBombero" Value="@(EstadoBombero.Inactivo)" Label="Inactivo" />
            </SelectOptions>
        </Select>
    </FormItem>

    <FormItem Label="Sexo">
        <EnumSelect DefaultValue="@bomberoVM.Sexo" TEnum="TipoSexo" @bind-Value="@bomberoVM.Sexo" />
    </FormItem>

    @* Carga Contacto-----------------------------------------------------------------------*@
    <FormItem Label="Teléfono Laboral">
        <Input DefaultValue="@contactoVM.TelefonoLaboral" @bind-Value="@contactoVM.TelefonoLaboral" />
    </FormItem>

    <FormItem Label="Teléfono Celular">
        <Input DefaultValue="@contactoVM.TelefonoCel" @bind-Value="@contactoVM.TelefonoCel" />
    </FormItem>

    <FormItem Label="Teléfono Fijo">
        <Input DefaultValue="@contactoVM.TelefonoFijo" @bind-Value="@contactoVM.TelefonoFijo" />
    </FormItem>

    <FormItem Label="Email">
        <Input DefaultValue="@contactoVM.Email" @bind-Value="@contactoVM.Email" />
    </FormItem>

    <FormItem Label="Nombre Brigada">
        <Select TItem="Brigada"
                TItemValue="int"
                DataSource="@brigadas"
                @bind-Value="@brigadaVM.BrigadaId"
                DefaultValue="@brigadaVM.BrigadaId"
                LabelName="@nameof(Brigada.NombreBrigada)"
                ValueName="@nameof(Brigada.BrigadaId)">
        </Select>
    </FormItem>
    <Button Class="boton_p" @onclick="@EditarBombero">
        Guardar
    </Button>
    <Button Class="boton_p" @onclick="OnClose">
        Cancelar
    </Button>
</Form>

@code {
    [Parameter] public int BomberoId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    BomberosDbContext? Context { get; set; }
    public Brigada[]? brigadas;
    public Bombero bomberoData { get; set; }
    public BomberosViewModel bomberoVM { get; set; } = new();
    public BrigadaViewModel brigadaVM { get; set; } = new();
    public ContactoViewModel contactoVM { get; set; } = new();
    public ImagenViewModel imagenVM { get; set; } = new();

    //Cargar ViewModel
    public async Task CargarBomberoVM()
    {
        bomberoVM = new();
        foreach (var i in bomberoData.GetType().GetProperties())
        {
            var propNombre = i.Name;
            var propValor = i.GetValue(bomberoData);
            var editarProp = bomberoVM.GetType().GetProperty(propNombre);
            if (editarProp != null && editarProp.CanWrite && propValor != null && propNombre != "Brigada" && propNombre != "BrigadaId")
            {
                editarProp.SetValue(bomberoVM, propValor);
            }
        }
        Contacto? contacto = await Context.Contactos.Where(c => c.PersonalId == BomberoId).SingleOrDefaultAsync();
        if (contacto != null)
        {
            contactoVM = new()
            {
                TelefonoCel = contacto.TelefonoCel,
                TelefonoLaboral = contacto.TelefonoLaboral,
                TelefonoFijo = contacto.TelefonoFijo,
                Email = contacto.Email
            };
        }
    }

    private async void SubirFoto(InputFileChangeEventArgs e)
    {
        string imagenBase64 = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

        imagenVM.Base64 = imagenBase64;
        imagenVM.TipoImagen = e.File.ContentType;
        imagenVM.Nombre = e.File.Name;
    }

    // Funcion editar o cancelar
    private async void EditarBombero()
    {
        Bombero? bombero = await Context.Bomberos
        .Where(b => b.PersonaId == BomberoId)
        .Include(c => c.Contacto)
        .SingleOrDefaultAsync();
        Brigada? brigada = brigadaVM.BrigadaId != 0 ? await Context.Brigadas.SingleOrDefaultAsync(m => m.BrigadaId == brigadaVM.BrigadaId) : null;
        bombero.FechaNacimiento = bomberoVM.FechaNacimiento;
        bombero.Sexo = bomberoVM.Sexo;
        bombero.FechaNacimiento = bomberoVM.FechaNacimiento;
        bombero.Sexo = bomberoVM.Sexo;
        bombero.Nombre = bomberoVM.Nombre;
        bombero.Apellido = bomberoVM.Apellido;
        bombero.Documento = bomberoVM.Documento;
        bombero.NumeroLegajo = bomberoVM.NumeroLegajo;
        bombero.NumeroIoma = bomberoVM.NumeroIoma;
        bombero.LugarNacimiento = bomberoVM.LugarNacimiento;
        bombero.Grado = bomberoVM.Grado;
        bombero.Dotacion = bomberoVM.Dotacion;
        bombero.GrupoSanguineo = bomberoVM.GrupoSanguineo;
        bombero.Altura = bomberoVM.Altura;
        bombero.Peso = bomberoVM.Peso;
        bombero.Estado = bomberoVM.Estado;
        bombero.Chofer = bomberoVM.Chofer;
        bombero.VencimientoRegistro = bomberoVM.VencimientoRegistro;
        bombero.Direccion = bomberoVM.Direccion;
        bombero.Observaciones = bomberoVM.Observaciones;
        bombero.Profesion = bomberoVM.Profesion;
        bombero.NivelEstudios = bomberoVM.NivelEstudios;
        bombero.FechaAceptacion = bomberoVM.FechaAceptacion;
        // Informacion Contacto
        bombero.Contacto = new()
        {
            TelefonoCel = contactoVM.TelefonoCel,
            TelefonoFijo = contactoVM.TelefonoFijo,
            TelefonoLaboral = contactoVM.TelefonoLaboral,
            Email = contactoVM.Email
        };
        // ----------------------
        if (!string.IsNullOrEmpty(imagenVM.Base64))
        {
            bombero.Imagen = new()
            {
                Base64Imagen = imagenVM.Base64,
                TipoImagen = imagenVM.TipoImagen,
                NombreImagen = imagenVM.Nombre
            };
        }

        await BomberoService.EditarBombero(bombero);
        await OnClose.InvokeAsync();
        await OnInitializedAsync();
        StateHasChanged();
    }
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(bomberoVM)}");
    }

    // Loading
    bool loading = false;
    void toggle(bool value) => loading = value;

    // View Models
    public class BomberosViewModel
    {
        public DateTime? FechaNacimiento { get; set; }
        public DateTime? FechaAceptacion { get; set; }
        [Required, StringLength(255)]
        public string Nombre { get; set; }
        [Required, StringLength(255)]
        public string Apellido { get; set; }
        public EstadoBombero Estado { get; set; }
        [Required]
        public int NumeroLegajo { get; set; }
        public EscalafonJerarquico Grado { get; set; }
        public TipoDotaciones Dotacion { get; set; }
        public TipoGrupoSanguineo GrupoSanguineo { get; set; }
        public int? Altura { get; set; }
        public int? Peso { get; set; }
        public bool Chofer { get; set; }
        public DateTime? VencimientoRegistro { get; set; }
        public TipoSexo Sexo { get; set; }
        public string? Direccion { get; set; }
        public string? LugarNacimiento { get; set; }
        [Required]
        public int Documento { get; set; }
        public string? Observaciones { get; set; }
        public string? Profesion { get; set; }
        public string? NivelEstudios { get; set; }
        public string? NumeroIoma { get; set; }
        //Contacto
        public string? TelefonoCel { get; set; }
        public string? TelefonoLaboral { get; set; }
        public string? TelefonoFijo { get; set; }
        public string? Email { get; set; }
    }
    public class BrigadaViewModel()
    {
        public int BrigadaId { get; set; }
        public string? Nombre { get; set; }
    }
    public class ContactoViewModel()
    {
        public string? TelefonoCel { get; set; }
        public string? TelefonoLaboral { get; set; }
        public string? TelefonoFijo { get; set; }
        public string? Email { get; set; }
    }
    public class ImagenViewModel
    {
        public string? Base64 { get; set; }
        public string? TipoImagen { get; set; }
        public string? Nombre { get; set; }
    }

    // Init
    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();
        bomberoData = await Context.Bomberos.Where(b => b.PersonaId == BomberoId).SingleOrDefaultAsync();
        brigadas = await Context.Brigadas.ToArrayAsync();

        await CargarBomberoVM();

        StateHasChanged();
    }
}