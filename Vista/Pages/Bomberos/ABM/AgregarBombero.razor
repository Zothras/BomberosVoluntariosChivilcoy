@inject NavigationManager navigationManager
@inject IDbContextFactory<BomberosDbContext> DbFactory

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.ComponentModel
@using Vista.Data.Models.Personas.Personal
@using Vista.Data.Models.Personas.Personal.Componentes
@page "/bomberos/agregar"

@*Servicios Utilizados*@
@using Vista.Services
@inject IBomberoService BomberoService
@inject IMessageService message

<style>
	/* Estilos generales */
	.container {
		padding: 24px;
		min-height: 100vh;
	}

	.page-title {
		font-size: 24px;
		font-weight: 600;
		color: #1f1f1f;
		margin-bottom: 24px;
		display: flex;
		align-items: center;
	}

	.page-title-icon {
		margin-right: 12px;
		color: #c43a3a;
	}

	.card {
		background-color: white;
		border-radius: 8px;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
		padding: 24px;
		margin-bottom: 24px;
	}

	.card-title {
		font-size: 18px;
		font-weight: 500;
		color: #434343;
		margin-bottom: 16px;
		padding-bottom: 12px;
		border-bottom: 1px solid #f0f0f0;
	}

	/* Estilos de la foto */
	.profile-photo-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 16px;
	}

	.photo-preview {
		width: 150px;
		height: 150px;
		border-radius: 50%;
		overflow: hidden;
		margin-bottom: 16px;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.upload-actions {
		display: flex;
		gap: 8px;
	}

	/* Estilo para las secciones del formulario */
	.form-section {
		margin-bottom: 24px;
	}

	/* Estilo para los botones de acción */
	.action-buttons {
		display: flex;
		justify-content: flex-end;
		gap: 12px;
		margin-top: 24px;
	}

	/* Estilo para los campos */
	:deep(.ant-form-item) {
		margin-bottom: 16px;
	}

	:deep(.ant-form-item-label > label) {
		color: #595959;
		font-weight: 500;
	}

	:deep(.ant-input),
	:deep(.ant-select:not(.ant-select-customize-input) .ant-select-selector),
	:deep(.ant-picker),
	:deep(.ant-input-number) {
		border-radius: 4px;
		border: 1px solid #d9d9d9;
	}

	:deep(.ant-input:hover),
	:deep(.ant-select:not(.ant-select-customize-input) .ant-select-selector:hover),
	:deep(.ant-picker:hover),
	:deep(.ant-input-number:hover) {
		border-color: #c43a3a;
	}

	:deep(.ant-input:focus),
	:deep(.ant-select-focused:not(.ant-select-customize-input) .ant-select-selector),
	:deep(.ant-picker-focused),
	:deep(.ant-input-number-focused) {
		border-color: #c43a3a;
		box-shadow: 0 0 0 2px rgba(196, 58, 58, 0.2);
	}

	/* Ajuste visual para el switch */
	:deep(.ant-switch-checked) {
		background-color: #c43a3a;
	}

	/* Estilo para campos requeridos */
	.required-field::after {
		content: '*';
		color: #c43a3a;
		margin-left: 4px;
	}

	/* Estilo para el campo condicional de chofer */
	.conditional-field {
		margin-top: 12px;
		padding-top: 12px;
		border-top: 1px dashed #f0f0f0;
	}
</style>

<div class="container">
	<div class="page-title">
		<Icon Type="fire" Theme="IconThemeType.Fill" Class="page-title-icon" />
		Registro de Nuevo Bombero
	</div>

	<Form Model="@bomberoView"
		  Layout="FormLayout.Vertical"
		  OnFinish="OnFinish"
		  OnFinishFailed="OnFinishFailed">
		<div class="card">
			<div class="card-title">Información Personal</div>
			<Row Gutter="24">
				<Col Span="6">
				<div class="profile-photo-container">
					<div class="photo-preview">
							@if (imageUrl != null)
							{
							<Avatar Src="@imageUrl" Alt="Foto de perfil" Size="@("5rem")" />
							}
							else
							{
							<Avatar Icon="@IconType.Outline.User" Size="@("5rem")" />
							}
					</div>

					<div class="upload-actions">
						<Button Type="@ButtonType.Primary">
							<label style="cursor: pointer; margin: 0;">
								<Icon Type="upload" /> Subir foto
								<InputFile OnChange="SubirFoto" style="display: none;" accept=".jpg,.jpeg,.png" />
							</label>
						</Button>

							@if (imageUrl != null)
							{
							<Button Type="@ButtonType.Default" OnClick="RemovePhoto" Danger>
								<Icon Type="delete" /> Eliminar
							</Button>
							}
					</div>
				</div>
				</Col>
				<Col Span="18">
				<Row Gutter="16">
					<Col Span="12">
					<FormItem Label="Nombre" Required>
						<Input @bind-Value="@bomberoView.Nombre" Placeholder="Ingrese el nombre" />
					</FormItem>
					</Col>
					<Col Span="12">
					<FormItem Label="Apellido" Required>
						<Input @bind-Value="@bomberoView.Apellido" Placeholder="Ingrese el apellido" />
					</FormItem>
					</Col>
				</Row>

				<Row Gutter="16">
					<Col Span="8">
					<FormItem Label="DNI" Required>
						<Input @bind-Value="@bomberoView.Documento" Placeholder="Ingrese el DNI" />
					</FormItem>
					</Col>
					<Col Span="8">
					<FormItem Label="Fecha de Nacimiento">
						<DatePicker @bind-Value="@bomberoView.FechaNacimiento"
									Picker="@DatePickerType.Date"
									Style="width: 100%;"
									Placeholder="@("Seleccione fecha")"
									AllowClear />
					</FormItem>
					</Col>
					<Col Span="8">
					<FormItem Label="Lugar de nacimiento">
						<Input @bind-Value="@bomberoView.LugarNacimiento" Placeholder="Ingrese lugar de nacimiento" />
					</FormItem>
					</Col>
				</Row>

				<Row Gutter="16">
					<Col Span="12">
					<FormItem Label="Dirección">
						<Input @bind-Value="@bomberoView.Direccion" Placeholder="Ingrese dirección" />
					</FormItem>
					</Col>
					<Col Span="6">
					<FormItem Label="Sexo">
						<EnumSelect TEnum="TipoSexo" @bind-Value="@bomberoView.Sexo" />
					</FormItem>
					</Col>
					<Col Span="6">
					<FormItem Label="Grupo Sanguíneo">
						<EnumSelect TEnum="TipoGrupoSanguineo" @bind-Value="@bomberoView.GrupoSanguineo" AllowClear />
					</FormItem>
					</Col>
				</Row>
				</Col>
			</Row>
		</div>

		<div class="card">
			<div class="card-title">Información Profesional</div>
			<Row Gutter="16">
				<Col Span="6">
				<FormItem Label="Número Legajo" Required>
					<Input @bind-Value="@bomberoView.NumeroLegajo" Placeholder="Ingrese número de legajo" />
				</FormItem>
				</Col>
				<Col Span="6">
				<FormItem Label="Dotación" Required>
					<EnumSelect TEnum="TipoDotaciones" @bind-Value="@bomberoView.Dotacion" />
				</FormItem>
				</Col>
				<Col Span="6">
				<FormItem Label="Grado">
					<EnumSelect TEnum="EscalafonJerarquico" @bind-Value="@bomberoView.Grado" AllowClear />
				</FormItem>
				</Col>
				<Col Span="6">
				<FormItem Label="Estado">
					<EnumSelect TEnum="EstadoBombero" @bind-Value="@bomberoView.Estado" AllowClear />
				</FormItem>
				</Col>
			</Row>

			<Row Gutter="16">
				<Col Span="8">
				<FormItem Label="Fecha de Aceptación">
					<DatePicker @bind-Value="@bomberoView.FechaAceptacion"
								Picker="@DatePickerType.Date"
								Style="width: 100%;"
								Placeholder="@("Seleccione fecha")"
								AllowClear />
				</FormItem>
				</Col>
				<Col Span="8">
				<FormItem Label="Número IOMA">
					<Input @bind-Value="@bomberoView.NumeroIoma" Placeholder="Ingrese número IOMA" />
				</FormItem>
				</Col>
			</Row>

			<Row Gutter="16">
				<Col Span="12">
				<FormItem Label="¿Es chofer?">
					<Switch @bind-Checked="@bomberoView.Chofer"></Switch>
						@if (bomberoView.Chofer)
						{
						<div class="conditional-field">
							<FormItem Label="Fecha vencimiento del carnet">
								<DatePicker @bind-Value="@bomberoView.VencimientoRegistro"
											Picker="@DatePickerType.Date"
											Style="width: 100%;"
											Placeholder="@("Seleccione fecha de vencimiento")"
											AllowClear />
							</FormItem>
						</div>
						}
				</FormItem>
				</Col>
			</Row>
		</div>

		<div class="card">
			<div class="card-title">Información Adicional</div>
			<Row Gutter="16">
				<Col Span="6">
				<FormItem Label="Altura (cm)">
					<AntDesign.InputNumber @bind-Value="@bomberoView.Altura" Style="width: 100%;" Placeholder="Ingrese altura" />
				</FormItem>
				</Col>
				<Col Span="6">
				<FormItem Label="Peso (kg)">
					<AntDesign.InputNumber @bind-Value="@bomberoView.Peso" Style="width: 100%;" Placeholder="Ingrese peso" />
				</FormItem>
				</Col>
				<Col Span="6">
				<FormItem Label="Nivel de estudio">
					<Input @bind-Value="@bomberoView.NivelEstudios" Placeholder="Ingrese nivel de estudios" />
				</FormItem>
				</Col>
				<Col Span="6">
				<FormItem Label="Profesión">
					<Input @bind-Value="@bomberoView.Profesion" Placeholder="Ingrese profesión" />
				</FormItem>
				</Col>
			</Row>

			<FormItem Label="Observaciones">
				<TextArea @bind-Value="@bomberoView.Observaciones" Placeholder="Ingrese observaciones" Rows="4" />
			</FormItem>
		</div>

		<div class="card">
			<div class="card-title">Información de Contacto</div>
			<Row Gutter="16">
				<Col Span="6">
				<FormItem Label="Teléfono Celular">
					<Input @bind-Value="@bomberoView.TelefonoCel" Placeholder="Ingrese teléfono celular" />
				</FormItem>
				</Col>
				<Col Span="6">
				<FormItem Label="Teléfono Fijo">
					<Input @bind-Value="@bomberoView.TelefonoFijo" Placeholder="Ingrese teléfono fijo" />
				</FormItem>
				</Col>
				<Col Span="6">
				<FormItem Label="Teléfono Laboral">
					<Input @bind-Value="@bomberoView.TelefonoLaboral" Placeholder="Ingrese teléfono laboral" />
				</FormItem>
				</Col>
				<Col Span="6">
				<FormItem Label="Email">
					<Input @bind-Value="@bomberoView.Email" Placeholder="Ingrese email" />
				</FormItem>
				</Col>
			</Row>
		</div>

		<div class="action-buttons">
			<Button Type="@ButtonType.Default" OnClick="Cancelar">
				Cancelar
			</Button>
			<Button Type="@ButtonType.Primary" HtmlType="submit" Class="primary-button" OnClick="CrearBombero">
				Registrar Bombero
			</Button>
		</div>
	</Form>
</div>

@code {
	[Parameter]
	public int? BomberoId { get; set; }

	private string? imageUrl;

	private class BomberosViewModel
	{
		public DateTime? FechaNacimiento { get; set; }
		public DateTime? FechaAceptacion { get; set; }
		[Required, StringLength(255)]
		public string Nombre { get; set; }
		[Required, StringLength(255)]
		public string Apellido { get; set; }
		public EstadoBombero Estado { get; set; }
		[Required]
		public int NumeroLegajo { get; set; }
		public EscalafonJerarquico Grado { get; set; }
		public TipoDotaciones Dotacion { get; set; }
		public TipoGrupoSanguineo GrupoSanguineo { get; set; }
		public int? Altura { get; set; }
		public int? Peso { get; set; }
		public bool Chofer { get; set; }
		public DateTime? VencimientoRegistro { get; set; }
		public TipoSexo Sexo { get; set; }
		[StringLength(255)]
		public string? Direccion { get; set; }
		[StringLength(255)]
		public string? LugarNacimiento { get; set; }
		[Required]
		public int Documento { get; set; }
		[StringLength(255)]
		public string? Observaciones { get; set; }
		[StringLength(255)]
		public string? Profesion { get; set; }
		[StringLength(255)]
		public string? NivelEstudios { get; set; }
		[StringLength(255)]
		public string? NumeroIoma { get; set; }
		[StringLength(255)]
		//Contacto-------------------------------
		public string? TelefonoCel { get; set; }
		[StringLength(255)]
		public string? TelefonoLaboral { get; set; }
		[StringLength(255)]
		public string? TelefonoFijo { get; set; }
		[StringLength(255)]
		public string? Email { get; set; }
		//Imagen-------------------------------
		public string? Base64 { get; set; }
		[StringLength(255)]
		public string? TipoImagen { get; set; }
		[StringLength(255)]
		public string? NombreImagen { get; set; }
	}

	BomberosViewModel bomberoView { get; set; } = new();
	public Bombero[]? bomberos;
	public bool existe;

	protected override async Task OnInitializedAsync()
	{
		using var db = DbFactory.CreateDbContext();
	}

	private async Task RemovePhoto()
	{
		imageUrl = null;
		bomberoView.Base64 = null;
		bomberoView.TipoImagen = null;
		bomberoView.NombreImagen = null;
		await Task.CompletedTask;
	}

	private async void SubirFoto(InputFileChangeEventArgs e)
	{
		string imagenBase64 = await Base64Helper.StreamToBase64(e.File.OpenReadStream());

		bomberoView.Base64 = imagenBase64;
		bomberoView.TipoImagen = e.File.ContentType;
		bomberoView.NombreImagen = e.File.Name;

		imageUrl = $"data:{bomberoView.TipoImagen};base64,{bomberoView.Base64}";
		StateHasChanged();
		await message.SuccessAsync("Foto subida correctamente.");
	}

	private async Task AgregarFotoPorDefecto(string rutaArchivo)
	{
		using var fileStream = File.OpenRead(rutaArchivo);
		using var memoryStream = new MemoryStream();
		await fileStream.CopyToAsync(memoryStream);
		memoryStream.Position = 0;

		string imagenBase64 = Convert.ToBase64String(memoryStream.ToArray());
		string tipoImagen = "image/png"; // Asumiendo que es un archivo PNG
		string nombreImagen = Path.GetFileName(rutaArchivo);

		bomberoView.Base64 = imagenBase64;
		bomberoView.TipoImagen = tipoImagen;
		bomberoView.NombreImagen = nombreImagen;
	}

	public Task Cancelar()
	{
		navigationManager.NavigateTo($"/bomberos", true);
		return Task.CompletedTask;
	}

	public async Task CrearBombero()
	{
		try
		{
			if (bomberoView.NumeroLegajo == 0)
			{
				await message.WarningAsync("El número de legajo no puede ser cero.");
				return;
			}

			if (string.IsNullOrEmpty(bomberoView.Base64))
			{
				await AgregarFotoPorDefecto("wwwroot/imagenes/default_profile_picture.png");
			}

			Bombero bombero = new Bombero()
			{
				FechaNacimiento = bomberoView.FechaNacimiento,
				Sexo = bomberoView.Sexo,
				Nombre = bomberoView.Nombre,
				Apellido = bomberoView.Apellido,
				Documento = bomberoView.Documento,
				NumeroLegajo = bomberoView.NumeroLegajo,
				NumeroIoma = bomberoView.NumeroIoma,
				LugarNacimiento = bomberoView.LugarNacimiento,
				Grado = bomberoView.Grado,
				Imagen = new()
				{
					NombreImagen = bomberoView.NombreImagen,
					TipoImagen = bomberoView.TipoImagen,
					Base64Imagen = bomberoView.Base64
				},
				Dotacion = bomberoView.Dotacion,
				GrupoSanguineo = bomberoView.GrupoSanguineo,
				Altura = bomberoView.Altura,
				Peso = bomberoView.Peso,
				Estado = bomberoView.Estado,
				Chofer = bomberoView.Chofer,
				VencimientoRegistro = bomberoView.VencimientoRegistro,
				Direccion = bomberoView.Direccion,
				Observaciones = bomberoView.Observaciones,
				Profesion = bomberoView.Profesion,
				NivelEstudios = bomberoView.NivelEstudios,
				FechaAceptacion = bomberoView.FechaAceptacion,
				Contacto = new Contacto
				{
					TelefonoCel = bomberoView.TelefonoCel,
					TelefonoFijo = bomberoView.TelefonoFijo,
					TelefonoLaboral = bomberoView.TelefonoLaboral,
					Email = bomberoView.Email
				}
			};

			await BomberoService.CrearBombero(bombero);

			bomberoView = new BomberosViewModel();
			StateHasChanged();
            message.Success("Se agregó el bombero."); // Se quita el await para evitar bloqueos innecesarios
			navigationManager.NavigateTo($"/bomberos", true);
		}
		catch (Exception ex)
		{
			// Mensajes personalizados de validación del service
			if (ex.Message.Contains("legajo", StringComparison.OrdinalIgnoreCase))
			{
				await message.WarningAsync(ex.Message);
			}
			else
			{
				// Otros errores no controlados
				await message.ErrorAsync("Ocurrió un error al crear el bombero.");
				Console.WriteLine($"Error: {ex.Message}");
			}
		}
	}

	private void OnFinish(EditContext editContext)
	{
		Console.WriteLine($"Success:{JsonSerializer.Serialize(bomberoView)}");
	}

	private void OnFinishFailed(EditContext editContext)
	{
		Console.WriteLine($"Failed:{JsonSerializer.Serialize(bomberoView)}");
	}
}