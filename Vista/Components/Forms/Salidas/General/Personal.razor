@using Vista.Data.ViewModels
@using Vista.Data.ViewModels.Personal
@using Vista.Data.Models.Vehiculos.Flota
@using Vista.Data.Models.Personas.Personal

@*Servicios Utilizados*@
@inject IMessageService MessageService

@if (Model.Moviles != null && Model.Moviles.Any())
{
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Elija el movil</label>
        <Select TItem="Movil"
                TItemValue="Movil"
                DataSource="@MovilesParaAsignar"
                @bind-Value="@MovilParaAsignar"
                LabelName="@nameof(Movil.NumeroMovil)"
                Placeholder="Seleccione un movil"
                DefaultActiveFirstOption="false"
                AllowClear="true"
                EnableSearch="true">
        </Select>
    </div>
}


@if (BotonSolo)
{
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Elija el bombero</label>
        <Select TItem="BomberoViweModel"
                TItemValue="int"
                DataSource="@bomberosSalirTodos"
                @bind-Value="@BomberoCuerpo"
                LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                ValueName="@nameof(BomberoViweModel.NumeroLegajo)"
                Placeholder="Seleccione un bombero"
                DefaultActiveFirstOption="false"
                AllowClear="true" EnableSearch>
        </Select>
    </div>
}

<div class="inpt-cont">
    <div class="centrado">
        @if (BotonSolo)
        {
            <div class="button-wrapper">
                <Button @onclick="() => AgregarCuerpoParticipante()"
                        Type="ButtonType.Primary"
                        class="ant-btn"
                        style="background-color: #4CAF50; border-color: #4CAF50;">

                    Cargar al cuerpo
                </Button>

                <!-- Botón interno a la derecha del texto -->
                <Button @onclick="CambiarBotonGrupo"
                        Type="ButtonType.Primary"
                        icon="user-add"
                        class="ant-btn ant-btn-icon-only"
                        style="background-color: #4CAF50; border-color: #4CAF50;">
                </Button>
            </div>
        }
        else
        {
            <div class="button-wrapper">
                <Button @onclick="AgregarTodosACuerpoParticipante"
                        Type="ButtonType.Primary"
                        class="ant-btn"
                        style="background-color: #4CAF50; border-color: #4CAF50;">
                    Cargar todos al cuerpo
                </Button>

                <!-- Botón interno a la derecha del texto -->
                <Button @onclick="CambiarBotonSolo"
                        Type="ButtonType.Primary"
                        icon="usergroup-add"
                        class="ant-btn ant-btn-icon-only"
                        style="background-color: #4CAF50; border-color: #4CAF50;">
                </Button>
            </div>
        }
    </div>
</div>

<div class="inpt-cont">
    <Table Context="bomberosSalida1" Size="TableSize.Small" PageSize="4" DataSource="bomberosSalida" @bind-SelectedRows="_selectedRows" Bordered>
        <ColumnDefinitions Context="row">
            <Selection />
            <PropertyColumn Property="c => c.NumeroLegajo" Title="Legajo" DefaultSortOrder="@SortDirection.Descending"
                            SorterCompare="@((a, b) => a - b)"></PropertyColumn>
            <PropertyColumn Property="c => c.ApellidoYNombre" Title="Apellido y Nombre" Sortable="true" DefaultSortOrder="@SortDirection.Ascending"></PropertyColumn>
            <PropertyColumn Property="@(c => c.MovilAsignado != null ? c.MovilAsignado.NumeroMovil : "Cuartel")" Title="Asignación"></PropertyColumn>
            <ActionColumn Title="Acciones">
                <Popconfirm Title="¿Quieres eliminar este bombero?" OnConfirm="() => deleteRow(row.NumeroLegajo)" OkText="Si" CancelText="No">
                    <i class="fa-solid fa-trash" style="color: #e90c0c; cursor: pointer;"></i>
                </Popconfirm>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>
</div>

@if (MostrarBoton)
{
    <div class="inpt-cont">
        <Button @onclick="EliminarSeleccionados"
                Danger
                icon="delete"
                style="background-color: #e90c0c; border-color: #e90c0c;">
            Borrar Seleccionados
        </Button>
    </div>
}

<div class="inpt-cont-inline">
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Encargado</label>
        <Select TItem="BomberoViweModel"
                TItemValue="BomberoViweModel"
                DataSource="@bomberosTodosView"
                Value="@EncargadoSeleccionado"
                ValueChanged="@EncargadoSeleccionadoChanged"
                LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                Placeholder="Seleccione  a un  bombero"
                DefaultActiveFirstOption="false"
                AllowClear="true" EnableSearch>
        </Select>
    </div>
    <div class="inpt-cont">
        <label class="inpt-cont--lbl">Lleno la planilla</label>
        <Select TItem="BomberoViweModel"
                TItemValue="BomberoViweModel"
                DataSource="@bomberosTodosView"
                Value="@PlanillaSeleccionado"
                ValueChanged="@PlanillaSeleccionadoChanged"
                LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                Placeholder="Seleccione un bombero"
                DefaultActiveFirstOption="false"
                AllowClear="true" EnableSearch>
        </Select>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public SalidasViewModels Model { get; set; } = null!;
    [Parameter, EditorRequired] public List<Bombero> BomberosTodos { get; set; } = null!;

    private IEnumerable<BomberoSalidaViewModels> _selectedRows = new List<BomberoSalidaViewModels>(); //Bomberos Seleccionados
    private List<BomberoViweModel> bomberosTodosView = new(); //Lista con todos los bomberos
    private List<BomberoViweModel> bomberosSalirTodos = new(); //Lista con todos los bomberos para salida
    private List<BomberoSalidaViewModels> bomberosSalida = new(); //Lista con los bomberos de la salida
    private int BomberoCuerpo; //ID del Bombero a añadir a la salida

    private BomberoViweModel? EncargadoSeleccionado { get; set; }
    private BomberoViweModel? PlanillaSeleccionado { get; set; }

    private Movil? MovilParaAsignar { get; set; }
    private List<Movil>? MovilesParaAsignar { get; set; }

    private bool BotonSolo { get; set; } = true;
    private bool MostrarBoton => _selectedRows.Any(); //Any() es un método de LINQ que verifica si una colección tiene al menos un elemento.

    protected override async Task OnParametersSetAsync()
    {
        // Clonar la lista para que el componente hijo trabaje con una copia
        bomberosTodosView = (await MapBomberosViewModelAsync(BomberosTodos)).ToList();

        // Crea una copia independiente para manipular en pantalla sin afectar la lista original.
        bomberosSalirTodos = bomberosTodosView.Select(b => b).ToList();

        if (Model.Moviles != null && Model.Moviles.Any())
        {
            MovilesParaAsignar = Model.Moviles.Select(ms => ms.Movil).ToList();
        }

        if (Model.LegajoEncargado != default)
        {
            EncargadoSeleccionado = bomberosTodosView.FirstOrDefault(b => b.NumeroLegajo == Model.LegajoEncargado);
        }

        if (Model.LegajoLLenoPlanilla != default)
        {
            PlanillaSeleccionado = bomberosTodosView.FirstOrDefault(b => b.NumeroLegajo == Model.LegajoLLenoPlanilla);
        }

        if (Model.CuerpoParticipante != null)
        {
            var bomberosToRemove = new List<BomberoViweModel>();

            foreach (var participante in Model.CuerpoParticipante)
            {
                BomberoViweModel? bombero = bomberosTodosView
                    .FirstOrDefault(b => b.NumeroLegajo == participante.Bombero.NumeroLegajo);

                if (bombero != null)
                {
                    BomberoSalidaViewModels bomberoSalidaViewModel = new()
                    {
                        NumeroLegajo = bombero.NumeroLegajo,
                        Nombre = bombero.Nombre,
                        Apellido = bombero.Apellido,
                        MovilAsignado = participante.MovilAsignado
                    };

                    bomberosToRemove.Add(bombero);
                    bomberosSalida.Add(bomberoSalidaViewModel);
                }
            }

            foreach (var bombero in bomberosToRemove)
            {
                bomberosSalirTodos.Remove(bombero);
            }
        }
        else
        {
            Model.CuerpoParticipante = new List<BomberoSalida>();
        }

    }

    private void CambiarBotonGrupo()
    {
        BotonSolo = false;
        StateHasChanged();
    }

    private void CambiarBotonSolo()
    {
        BotonSolo = true;
        StateHasChanged();
    }

    private async Task AgregarTodosACuerpoParticipante()
    {
        // Procesa todos los bomberos
        foreach (var bombero in bomberosSalirTodos.ToList())
        {
            await AgregarCuerpoParticipante(bombero.NumeroLegajo);
        }
    }

    private async Task AgregarCuerpoParticipante(int? numleg = null)
    {
        // Encuentra el bombero seleccionado basado en el número de legajo
        var bomberoSeleccionado = numleg.HasValue
            ? bomberosSalirTodos.FirstOrDefault(b => b.NumeroLegajo == numleg)
            : bomberosSalirTodos.FirstOrDefault(b => b.NumeroLegajo == BomberoCuerpo);

        if (bomberoSeleccionado != null)
        {
            // Elimina el bombero seleccionado de la lista
            bomberosSalirTodos.RemoveAll(b => b.NumeroLegajo == bomberoSeleccionado.NumeroLegajo);

            // Crea el nuevo objeto de salida del bombero
            var nuevoBomberoSalida = new BomberoSalidaViewModels
            {
                MovilAsignado = MovilParaAsignar,
                Nombre = bomberoSeleccionado.Nombre,
                Apellido = bomberoSeleccionado.Apellido,
                NumeroLegajo = bomberoSeleccionado.NumeroLegajo
            };

            // Añade el nuevo bombero a la lista de salidas
            bomberosSalida.Add(nuevoBomberoSalida);

            // Asegúrate de que la lista de CuerpoParticipante está inicializada
            if (Model.CuerpoParticipante == null)
            {
                Model.CuerpoParticipante = new List<BomberoSalida>();
            }

            // Solicita el objeto Bombero y Crea el objeto BomberoSalida
            var bombero = BomberosTodos.FirstOrDefault(b => b.NumeroLegajo == bomberoSeleccionado.NumeroLegajo);

            if (bombero == null)
            {
                await MessageService.ErrorAsync($"No se encontró el bombero con legajo {bomberoSeleccionado.NumeroLegajo}.");
                return;
            }
            var bomSalida = new BomberoSalida
            {
                MovilAsignado = nuevoBomberoSalida.MovilAsignado,
                Bombero = bombero
            };

            // Añade el bombero a la lista de CuerpoParticipante
            Model.CuerpoParticipante.Add(bomSalida);

            // Actualiza el estado del componente si es necesario
            StateHasChanged();
        }
    }

    private void UpdateModel()
    {
        Model.LegajoEncargado = EncargadoSeleccionado?.NumeroLegajo ?? 0;
        Model.LegajoLLenoPlanilla = PlanillaSeleccionado?.NumeroLegajo ?? 0;
    }

    private async Task EliminarSeleccionados()
    {
        foreach (var Bom in _selectedRows)
        {
            await deleteRow(Bom.NumeroLegajo);
        }

        // Reasignar _selectedRows a una nueva lista vacía
        _selectedRows = Enumerable.Empty<BomberoSalidaViewModels>(); // Suponiendo que IEnumerable<BomberoSalidaViewModels>
    }

    private async Task deleteRow(int numlegajo)
    {
        // Encuentra el bombero con el número de legajo especificado en la lista del componente
        var bomberoToRemove = bomberosSalida.FirstOrDefault(b => b.NumeroLegajo == numlegajo);

        if (bomberoToRemove != null)
        {
            // Encuentra el bombero con el número de legajo especificado en la lista del Model
            var bomberoToRemoveModel = Model.CuerpoParticipante.FirstOrDefault(b => b.Bombero.NumeroLegajo == numlegajo);

            if (bomberoToRemoveModel != null)
            {
                Model.CuerpoParticipante.Remove(bomberoToRemoveModel);
            }

            bomberosSalida.Remove(bomberoToRemove);

            // Añade el bombero de vuelta a la lista de bomberos disponibles para salir
            bomberosSalirTodos.Add(bomberosTodosView.FirstOrDefault(b => b.NumeroLegajo == bomberoToRemove.NumeroLegajo));
        }
    }

    private void EncargadoSeleccionadoChanged(BomberoViweModel value)
    {
        EncargadoSeleccionado = value;
        UpdateModel();
    }

    private void PlanillaSeleccionadoChanged(BomberoViweModel value)
    {
        PlanillaSeleccionado = value;
        UpdateModel();
    }

    private async Task<List<BomberoViweModel>> MapBomberosViewModelAsync(List<Bombero> bomberos)
    {
        if (bomberos == null || !bomberos.Any())
        {
            await MessageService.ErrorAsync("No hay bomberos disponibles para mapear.");
            return new List<BomberoViweModel>();
        }

        var bomberosViewModel = bomberos.Select(b => new BomberoViweModel
        {
            Id = b.PersonaId,
            FechaNacimiento = b.FechaNacimiento,
            Sexo = b.Sexo,
            Nombre = b.Nombre,
            Apellido = b.Apellido,
            Documento = b.Documento,
            NumeroLegajo = b.NumeroLegajo,
            NumeroIoma = b.NumeroIoma,
            LugarNacimiento = b.LugarNacimiento,
            Grado = b.Grado,
            Dotacion = b.Dotacion,
            Estado = b.Estado,
            EsChofer = b.Chofer,
            VencimientoRegistro = b.VencimientoRegistro,
            Direccion = b.Direccion,
            Observaciones = b.Observaciones,
            Profesion = b.Profesion,
            NivelEstudios = b.NivelEstudios,
            FechaAceptacion = b.FechaAceptacion,
        }).ToList();

        await MessageService.SuccessAsync("Bomberos mapeados correctamente.");
        return bomberosViewModel;
    }
}