@using Vista.Data.ViewModels
@using Vista.Data.ViewModels.Personal
@using Vista.Data.Models.Vehiculos.Flota
@using Vista.Data.Models.Personas.Personal

@*Servicios Utilizados*@
@using Vista.Services
@inject IMessageService MessageService

<Form Model="movilSalidaView">

    <FormItem Label="Seleccione al Chofer">
        <Select TItem="BomberoViweModel"
                TItemValue="BomberoViweModel"
                DataSource="@bomberoChoferesSalir"
                @bind-Value="@movilSalidaView.Chofer"
                LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                Placeholder="Selecione a un bombero"
                DefaultActiveFirstOption="false"
                AllowClear="true"
                EnableSearch>
        </Select>
    </FormItem>

    <FormItem Label="Numero de Movil">
        <Select TItem="Movil"
                TItemValue="string"
                DataSource="@Moviles"
                @bind-Value="@movilSalidaView.NumeroMovil"
                LabelName="@nameof(Movil.NumeroMovil)"
                ValueName="@nameof(Movil.NumeroMovil)"
                Placeholder="Selecione el movil"
                DefaultActiveFirstOption="false"
                AllowClear="true"
                EnableSearch>
        </Select>
    </FormItem>

    @if (movilSalidaView.NumeroMovil is not null)
    {
        movilSalidaView.KmSalida = Moviles.FirstOrDefault(m => m.NumeroMovil == movilSalidaView.NumeroMovil)?.Kilometraje ?? 0;
    }

    <FormItem Label="Kilometraje Actual">
        <Input @bind-Value="movilSalidaView.KmSalida" Disabled>
        <Suffix>Km</Suffix>
        </Input>
    </FormItem>

    <FormItem Label="Kilometraje de Llegada">
        <Input @bind-Value="movilSalidaView.KmLlegada" Placeholder="Ingrese el kilometraje de llegada">
        <Suffix>Km</Suffix>
        </Input>
    </FormItem>

    <FormItem Label="¿Cargo Combustible?">
        <Switch @bind-Checked="switchMoviles" Style="width: 10px!important;" OnChange="@OnChangeSwitch" />
    </FormItem>

    <Button OnClick="@AgregarMovilSalida">Cargar movil</Button>
</Form>

@*Modal para los Datos de la Carga de Combustible*@
<Modal Title="Datos de la carga de combustible" Visible="@_visible" OnCancel="@HandleCancelMovil" OkText=@("Cargar Movil") CancelText="@("Cancelar")">
    <Form Model="@movilSalidaView">
        <FormItem Label="Número de Remito">
            <Input @bind-Value="@movilSalidaView.NumeroFactura" />
        </FormItem>
        <FormItem Label="Fecha de la Factura">
            <DatePicker TValue="DateTime?" @bind-Value="@movilSalidaView.FechaFactura" />
        </FormItem>
        <FormItem Label="Tipo de Combustible">
            <Input @bind-Value="@movilSalidaView.TipoConbustible" />
        </FormItem>
        <FormItem Label="Cantidad de Litros">
            <Input @bind-Value="@movilSalidaView.CantidadLitros" />
        </FormItem>
        <FormItem Label="Quien lleno">
            <Select TItem="BomberoViweModel"
                    TItemValue="BomberoViweModel"
                    DataSource="@bomberoChoferes"
                    @bind-Value="@movilSalidaView.QuienLleno"
                    LabelName="@nameof(BomberoViweModel.ApellidoYNombre)"
                    ValueName="@nameof(BomberoViweModel.Nombre)"
                    Placeholder="Seleccione a un bombero"
                    DefaultActiveFirstOption="false"
                    AllowClear="true"
                    EnableSearch>
            </Select>
        </FormItem>
    </Form>
</Modal>

@if (Model.Moviles != null && Model.Moviles.Any())
{
    <div>
        <Table Size="TableSize.Small" PageSize="4" Context="MovilesSalidasL1" DataSource="Model.Moviles" Bordered>
            <PropertyColumn Property="c => c.Movil.NumeroMovil" Title="Número de Móvil"></PropertyColumn>
            <PropertyColumn Property="c => c.Chofer.Nombre"></PropertyColumn>
            <PropertyColumn Property="c => c.Chofer.Apellido"></PropertyColumn>
            <ActionColumn Title="Acciones">
                <Popconfirm Title="¿Quieres borrar este movil?"
                            OnConfirm="()=> DeleteRowMovil(MovilesSalidasL1.Movil.NumeroMovil)"
                            OkText="Si"
                            CancelText="No">
                    <i class="fa-solid fa-trash" style="color: #e90c0c;cursor: pointer;"></i>
                </Popconfirm>
            </ActionColumn>
        </Table>
    </div>
}

@code {
    [Parameter, EditorRequired] public SalidasViewModels Model { get; set; } = null!;
    [Parameter, EditorRequired] public List<Bombero> BomberosTodos { get; set; } = null!;
    [Parameter, EditorRequired] public List<Movil> Moviles { get; set; } = null!;

    private List<BomberoViweModel> bomberoChoferes { get; set; } = new();
    private List<BomberoViweModel> bomberoChoferesSalir { get; set; } = new();
    private List<BomberoViweModel> BomberosViewModelTodos { get; set; } = null!;


    private MovilSalidaViewModels movilSalidaView = new MovilSalidaViewModels();

    private bool switchMoviles = false;
    private bool _visible = false;
    private bool loading = false;

    protected override async Task OnParametersSetAsync()
    {
        // Inicializar la lista de moviles si es null
        if (Model.Moviles == null)
        {
            Model.Moviles = new List<Movil_Salida>();
        }

        // Clonar la lista para que el componente hijo trabaje con una copia
        BomberosViewModelTodos = (await MapBomberosViewModelAsync(BomberosTodos)).ToList();

        // Obtener las listas de bomberos choferes y móviles
        bomberoChoferes = await FiltrarBomberosChoferesAsync(BomberosViewModelTodos);
        bomberoChoferesSalir = bomberoChoferes.ToList();

        // Verificar si hay móviles en el modelo
        if (Model.Moviles.Any())
        {
            var bomberosToRemove = new List<BomberoViweModel>();
            var movilesToRemove = new List<Movil>();

            // Recorrer los móviles en el modelo
            foreach (var movil in Model.Moviles)
            {
                // Buscar el móvil correspondiente en la lista de todos los móviles
                Movil? movilRem = Moviles.FirstOrDefault(m => m.NumeroMovil == movil.Movil.NumeroMovil);

                // Buscar el chofer correspondiente en la lista de bomberos choferes
                BomberoViweModel? bombero = bomberoChoferes.FirstOrDefault(b => b.NumeroLegajo == movil.Chofer.NumeroLegajo);

                if (movilRem != null)
                {
                    movilesToRemove.Add(movilRem);
                }

                if (bombero != null)
                {
                    bomberosToRemove.Add(bombero);
                }
            }

            // Eliminar los móviles que están en la lista de removibles
            Moviles.RemoveAll(m => movilesToRemove.Contains(m));

            // Eliminar los bomberos que están en la lista de removibles
            bomberoChoferesSalir.RemoveAll(b => bomberosToRemove.Contains(b));
        }
    }

    private void toggle(bool value) => loading = value;

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }

    private void OnFinishModel(EditContext editContext)
    {
        _visible = false;
    }

    private void HandleCancelMovil(MouseEventArgs e)
    {
        _visible = false;
        switchMoviles = false;

        movilSalidaView.NumeroFactura = null;
        movilSalidaView.FechaFactura = null;
        movilSalidaView.TipoConbustible = null;
        movilSalidaView.CantidadLitros = null;
        movilSalidaView.QuienLleno = null;
    }

    private void OnChangeSwitch()
    {
        _visible = switchMoviles;
    }

    private async Task<List<BomberoViweModel>> FiltrarBomberosChoferesAsync(List<BomberoViweModel> bomberos)
    {
        if (bomberos == null || !bomberos.Any())
        {
            await MessageService.ErrorAsync("No hay bomberos disponibles para filtrar.");
            return new List<BomberoViweModel>(); // Retorna lista vacía para evitar errores
        }

        // Filtra los choferes y crea copias independientes de cada objeto
        var choferes = bomberos
            .Where(b => b.EsChofer)
            .Select(b => new BomberoViweModel
            {
                Id = b.Id,
                FechaNacimiento = b.FechaNacimiento,
                Sexo = b.Sexo,
                Nombre = b.Nombre,
                Apellido = b.Apellido,
                Documento = b.Documento,
                NumeroLegajo = b.NumeroLegajo,
                NumeroIoma = b.NumeroIoma,
                LugarNacimiento = b.LugarNacimiento,
                Grado = b.Grado,
                Dotacion = b.Dotacion,
                Estado = b.Estado,
                EsChofer = b.EsChofer,
                VencimientoRegistro = b.VencimientoRegistro,
                Direccion = b.Direccion,
                Observaciones = b.Observaciones,
                Profesion = b.Profesion,
                NivelEstudios = b.NivelEstudios,
                FechaAceptacion = b.FechaAceptacion,
            })
            .ToList();

        if (!choferes.Any())
        {
            await MessageService.WarningAsync("No se encontraron bomberos con el rol de chofer.");
        }

        await MessageService.SuccessAsync("Bomberos choferes filtrados correctamente.");
        return choferes;
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(movilSalidaView)}");
    }

    private async void DeleteRowMovil(string numeroMovil)
    {
        var movilToDelete = Model.Moviles.FirstOrDefault(m => m.Movil.NumeroMovil == numeroMovil);

        if (movilToDelete != null)
        {
            // Obtener el chofer y el móvil antes de eliminarlos de la lista
            var chofer = movilToDelete.Chofer;
            var movil = movilToDelete.Movil;

            var choferview = BomberosViewModelTodos.FirstOrDefault(b => b.NumeroLegajo == movilSalidaView.Chofer.NumeroLegajo);

            // Eliminar el móvil de la lista
            Model.Moviles.Remove(movilToDelete);

            // Añadir el chofer nuevamente a la lista de choferes disponibles
            if (chofer != null && choferview != null)
            {
                bomberoChoferesSalir.Add(choferview);
            }

            // Añadir el móvil a la lista de móviles disponibles
            Moviles.Add(movil);

            // Notificar que el estado ha cambiado
            StateHasChanged();
        }
        else
        {
            await MessageService.ErrorAsync($"El móvil con número {numeroMovil} no fue encontrado.");
        }
    }

    private async Task AgregarMovilSalida()
    {
        try
        {
            Bombero? bomberoChofer = BomberosTodos.FirstOrDefault(b => b.NumeroLegajo == movilSalidaView.Chofer.NumeroLegajo);

            Movil? Movilsalida = Moviles.FirstOrDefault(m => m.NumeroMovil == movilSalidaView.NumeroMovil);

            if (bomberoChofer == null || Movilsalida == null)
            {
                await MessageService.ErrorAsync("No se encontraron los datos ingresados");
                return;
            }

            // Elimina el bombero y movil seleccionado de la lista
            bomberoChoferesSalir.RemoveAll(b => b.NumeroLegajo == bomberoChofer.NumeroLegajo);
            Moviles.RemoveAll(m => m.NumeroMovil == Movilsalida.NumeroMovil);

            string? QuienLleno = movilSalidaView.QuienLleno != null ? $"{movilSalidaView.QuienLleno.Apellido}, {movilSalidaView.QuienLleno.Nombre}" : null;

            // Crear el Objeto Movil Salida
            Movil_Salida m = new()
            {
                Movil = Movilsalida,
                CargoCombustible = switchMoviles,
                NumeroFactura = movilSalidaView.NumeroFactura,
                FechaFactura = movilSalidaView.FechaFactura,
                TipoConbustible = movilSalidaView.TipoConbustible,
                CantidadLitros = movilSalidaView.CantidadLitros,
                QuienLleno = QuienLleno,
                TelefonoQuienLleno = movilSalidaView.TelefonoQuienLleno,
                KmLlegada = movilSalidaView.KmLlegada,
                Chofer = bomberoChofer
            };

            // Añade el MovilSalida a la Salida
            Model.Moviles.Add(m);

            //Limpia las casillas
            movilSalidaView.KmSalida = 0;
            movilSalidaView.KmLlegada = 0;
            switchMoviles = false;
            movilSalidaView.NumeroFactura = null;
            movilSalidaView.FechaFactura = null;
            movilSalidaView.TipoConbustible = null;
            movilSalidaView.CantidadLitros = null;
            movilSalidaView.QuienLleno = null;

            StateHasChanged(); // Notifica el Cambio y Actualiza
            await MessageService.SuccessAsync("Movil añadido Correctamente");
        }
        catch (Exception e)
        {
            StateHasChanged();
            await MessageService.ErrorAsync(e.InnerException?.Message ?? e.Message, 5);
        }
    }

    private async Task<List<BomberoViweModel>> MapBomberosViewModelAsync(List<Bombero> bomberos)
    {
        if (bomberos == null || !bomberos.Any())
        {
            await MessageService.ErrorAsync("No hay bomberos disponibles para mapear.");
            return new List<BomberoViweModel>();
        }

        var bomberosViewModel = bomberos.Select(b => new BomberoViweModel
        {
            Id = b.PersonaId,
            FechaNacimiento = b.FechaNacimiento,
            Sexo = b.Sexo,
            Nombre = b.Nombre,
            Apellido = b.Apellido,
            Documento = b.Documento,
            NumeroLegajo = b.NumeroLegajo,
            NumeroIoma = b.NumeroIoma,
            LugarNacimiento = b.LugarNacimiento,
            Grado = b.Grado,
            Dotacion = b.Dotacion,
            Estado = b.Estado,
            EsChofer = b.Chofer,
            VencimientoRegistro = b.VencimientoRegistro,
            Direccion = b.Direccion,
            Observaciones = b.Observaciones,
            Profesion = b.Profesion,
            NivelEstudios = b.NivelEstudios,
            FechaAceptacion = b.FechaAceptacion,
        }).ToList();

        await MessageService.SuccessAsync("Bomberos mapeados correctamente.");
        return bomberosViewModel;
    }
}