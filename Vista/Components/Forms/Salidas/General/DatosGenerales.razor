@using Vista.Data.ViewModels
@using System.Timers
@using System.Web
@using Vista.Data.ViewModels.APIResponse
@using Vista.Data.Enums.Salidas

@*Servicios Utilizados*@
@using Vista.Services
@inject IGeorefService GeorefService
@inject ISalidaService SalidaService

<style>
    /* Contenedor para el mapa */
    .map-container {
        width: 300px;
        height: 300px;
        border: 1px solid #ccc;
        border-radius: 6px;
        overflow: hidden;
        margin: 20px auto;
    }

    @@media screen and (max-width: 450px) {
        .map-container {
            width: 100%;
            height: auto;
        }
    }
</style>

<Form Model="Model">
    @if (Model.TimeLlegada < Model.TimeSalida)
    {
        <FormItem Label="Fechas (salida y llegada)" Required>
            <RangePicker TValue="DateTime[]" Disabled="new bool[] { false, true }"
                         @bind-Value="@FechaRange" />
        </FormItem>
    }
    else
    {
        <FormItem Label="Fecha" Required>
            <DatePicker TValue="DateTime" Picker="@DatePickerType.Date" @bind-Value="@Model.FechaSalida" />
        </FormItem>
    }

    <FormItem Label="Hora de Salida" Required>
        <TimePicker @bind-Value="@Model.TimeSalida" Format="HH:mm" />
    </FormItem>

    <FormItem Label="Hora de Llegada" Required>
        <TimePicker @bind-Value="@Model.TimeLlegada" Format="HH:mm" />
    </FormItem>

    <FormItem Label="Tipo Zona" Required>
        <EnumSelect TEnum="TipoZona" @bind-Value="@Model.TipoZona" />
    </FormItem>

    @if (Model.TipoZona == TipoZona.Urbana)
    {
        <FormItem Label="Dirección" Required>
            @if (isApiAvailable)
            {
                <Select TItem="Direccion"
                        TItemValue="Direccion"
                        DataSource="@direcciones"
                        @bind-Value="@Model.Direccion"
                        Placeholder="Seleccione una calle"
                        LabelName="@nameof(Direccion.NombreYAltura)"
                        OnSearch="OnSearch"
                        SearchDebounceMilliseconds="350"
                        EnableSearch
                        Loading="@_loading"
                        OnSelectedItemChanged="OnStreetSelected">
                </Select>
            }
            else
            {
                <Input @bind-Value="@Model.CalleORuta" />
            }
        </FormItem>

        <FormItem Label="Latitud">
            @if (isApiAvailable)
            {
                <Input @bind-Value="@Model.Latitud" Disabled="true" />
            }
            else
            {
                <Input @bind-Value="@Model.Latitud" />
            }
        </FormItem>

        <FormItem Label="Longitud">
            @if (isApiAvailable)
            {
                <Input @bind-Value="@Model.Longitud" Disabled="true" />
            }
            else
            {
                <Input @bind-Value="@Model.Longitud" />
            }
        </FormItem>
    }
    else
    {
        <FormItem Label="Latitud" Required>
            <Input @bind-Value="@Model.Latitud" />
        </FormItem>

        <FormItem Label="Longitud" Required>
            <Input @bind-Value="@Model.Longitud" />
        </FormItem>
    }

    @if (Model.Latitud != 0.0 && Model.Longitud != 0.0)
    {
        <div class="map-container">
            <iframe width="300"
                    height="300"
                    style="border:0;"
                    src="@GetOpenStreetMapUrl(Model.Latitud, Model.Longitud)"
                    frameborder="0" allowfullscreen></iframe>
        </div>
    }

    <FormItem Label="Región Cuartel" Required>
        <EnumSelect TEnum="CuartelRegionChivilcoy" @bind-Value="@Model.CuartelRegion" DefaultActiveFirstOption="false" />
    </FormItem>

    <FormItem Label="Descripción" Required>
        <TextArea Placeholder="Descripcion" @bind-Value="@Model.Descripcion" />
    </FormItem>

    @if (!esSoloDireccion && MostrarOpcionDepartamento)
    {
        <FormItem Label="¿Se encuentra en un Departamento?">
            <Switch @bind-Checked="@esDepartamento" Style="width: 10px!important;" />
        </FormItem>
    }

    @if (esDepartamento)
    {
        <FormItem Label="Número de Piso">
            <Input @bind-Value="@Model.PisoNumero" />
        </FormItem>
        <FormItem Label="Número de Departamento">
            <Input @bind-Value="@Model.Depto" />
        </FormItem>
    }

    <FormItem Label="¿Se convoca a la guardia?">
        <Switch @bind-Checked="@SeConvocoGuardia" Style="width: 10px!important;" />
    </FormItem>

    @if (SeConvocoGuardia)
    {
        <FormItem Label="Seleccióne la Guardia">
            <EnumSelect TEnum="Guardia" @bind-Value="@Model.GuardiaSelecionada" />
        </FormItem>
    }
</Form>

@code {
    [Parameter, EditorRequired] public required SalidasViewModels Model { get; set; }
    [Parameter] public bool esSoloDireccion { get; set; } = false;
    [Parameter] public bool MostrarOpcionDepartamento { get; set; } = true;
    [Parameter] public EventCallback<bool> OnCompleted { get; set; } // Evento para notificar que se ha completado el formulario

    private bool isApiAvailable;
    private int anio = DateTime.Now.Year;
    private bool _loading = false; // Variable para controlar el estado de carga
    private bool esDepartamento;
    private bool SeConvocoGuardia;

    // Variable del Formulario utilizada para la validación
    private EditContext editContext;

    private List<Direccion> direcciones = new();

    protected override async Task OnInitializedAsync()
    {
        isApiAvailable = await GeorefService.CheckApiConnectionAsync();
    }

    private async Task ValidateForm()
    {
        var esValido = editContext.Validate();

        if (esValido)
        {
            await OnCompleted.InvokeAsync(true); // Invoca el evento OnCompleted si el formulario es válido
        }
        else
        {
            await OnCompleted.InvokeAsync(false); // Invoca el evento OnCompleted si el formulario no es válido
        }
    }

    private void OnStreetSelected(Direccion selectedStreet)
    {
        if (selectedStreet != null)
        {
            Model.CalleORuta = $"{selectedStreet.Calle.Nombre} {selectedStreet.Altura.Valor}";
            Model.Latitud = selectedStreet.Ubicacion.Lat;
            Model.Longitud = selectedStreet.Ubicacion.Lon;
            StateHasChanged();
        }
    }

    private async void OnSearch(string value)
    {
        if (value.Length >= 3)
        {
            _loading = true;
            StateHasChanged(); // actualiza el componente para que se muestre el spinner

            try
            {
                direcciones = await GeorefService.GetStreetSuggestionsAsync(value);
            }
            catch (Exception ex)
            {
                // Podés loguear el error si querés
                Console.Error.WriteLine($"Error al buscar direcciones: {ex.Message}");
                direcciones.Clear();
            }

            _loading = false;
            await InvokeAsync(StateHasChanged); // vuelve a actualizar el componente
        }
        else
        {
            direcciones.Clear();
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }


    private DateTime[] FechaRange
    {
        get => new DateTime[] { Model.FechaSalida, Model.FechaLlegada };
        set
        {
            if (value.Length == 1)
            {
                Model.FechaSalida = value[0];
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Model != null)
        {
            if (Model.FechaSalida == DateTime.MinValue)
            {
                Model.FechaSalida = DateTime.Today;
            }
            esDepartamento = !string.IsNullOrEmpty(Model.PisoNumero) ||
                              !string.IsNullOrEmpty(Model.Depto);
        }
    }

    private string GetOpenStreetMapUrl(double latitud, double longitud)
    {
        // URL base para el embed de OpenStreetMap
        string baseUrl = "https://www.openstreetmap.org/export/embed.html";

        // Redondear a 5 decimales para las coordenadas
        string latString = Math.Round(latitud, 5).ToString(System.Globalization.CultureInfo.InvariantCulture);
        string lonString = Math.Round(longitud, 5).ToString(System.Globalization.CultureInfo.InvariantCulture);

        // Generar los valores para el parámetro bbox (rango de coordenadas alrededor del punto)
        double latMin = latitud - 0.005;  // Ajuste más pequeño para un mejor zoom
        double latMax = latitud + 0.005;
        double lonMin = longitud - 0.005;
        double lonMax = longitud + 0.005;

        // Formatear las coordenadas para asegurar que se usen puntos como separadores decimales
        string latMinString = latMin.ToString(System.Globalization.CultureInfo.InvariantCulture);
        string latMaxString = latMax.ToString(System.Globalization.CultureInfo.InvariantCulture);
        string lonMinString = lonMin.ToString(System.Globalization.CultureInfo.InvariantCulture);
        string lonMaxString = lonMax.ToString(System.Globalization.CultureInfo.InvariantCulture);

        // Parámetros para el mapa
        string bbox = $"{lonMinString},{latMinString},{lonMaxString},{latMaxString}";
        string marker = $"{latString},{lonString}";

        // Codificar las coordenadas para las comas
        string encodedBbox = HttpUtility.UrlEncode(bbox);  // Codifica las comas
        string encodedMarker = HttpUtility.UrlEncode(marker);  // Codifica las comas

        // Generar la URL completa con los parámetros codificados
        string urlParameters = $"?bbox={encodedBbox}&layer=mapnik&marker={encodedMarker}";

        // Combinar la URL base con los parámetros
        return baseUrl + urlParameters;
    }
}