@using Vista.Data.ViewModels;
@using Vista.Data.ViewModels.Personal;
@using Vista.Data.Models.Salidas;
@using Vista.Data.Models.Personas;
@using System.Linq;

@inject IMessageService MessageService

<Form Model="Model">
    <FormItem Label="Nombre del Solicitante" Required>
        <Input @bind-Value="@Model.NombreSolicitante" Disabled="@(!isUnlocked)" />
    </FormItem>

    <FormItem Label="Apellido del Solicitante" Required>
        <Input @bind-Value="@Model.ApellidoSolicitante" Disabled="@(!isUnlocked)" />
    </FormItem>

    <FormItem Label="Documento del Solicitante">
        <Input @bind-Value="@Model.DniSolicitante" Disabled="@(!isUnlocked)" />
    </FormItem>

    <FormItem Label="Telefono del Solicitante" Required>
        <Input @bind-Value="@Model.TelefonoSolicitante" Disabled="@(!isUnlocked)" />
    </FormItem>

    <FormItem Label="Nómbre del Receptor" Required>
        <Input @bind-Value="@Model.NombreReceptor" Disabled="@(!isUnlocked)" />
    </FormItem>

    <FormItem Label="Apellido del Receptor" Required>
        <Input @bind-Value="@Model.ApellidoReceptor" Disabled="@(!isUnlocked)" />
    </FormItem>
</Form>

@code {
    [Parameter, EditorRequired] public SalidasViewModels Model { get; set; } = null!;
    [Parameter, EditorRequired] public bool isUnlocked { get; set; } = false;
    [Parameter, EditorRequired] public EventCallback<bool> OnCompleted { get; set; } // Evento para notificar que se ha completado el formulario

    // Variable del Formulario utilizada para la validación
    private EditContext editContext;

    private async Task ValidateForm()
    {
        var esValido = editContext.Validate();

        if (esValido)
        {
            await OnCompleted.InvokeAsync(true); // Invoca el evento OnCompleted si el formulario es válido
        }
        else
        {
            await OnCompleted.InvokeAsync(false); // Invoca el evento OnCompleted si el formulario no es válido
        }
    }
}
